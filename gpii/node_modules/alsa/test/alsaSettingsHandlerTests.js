/*
    GPII Node.js ALSA Volume Bridge

    Copyright 2013 Emergya

    Licensed under the New BSD license. You may not use this file except in
    compliance with this License.

    You may obtain a copy of the License at
    https://github.com/GPII/linux/blob/master/LICENSE.txt

    The research leading to these results has received funding from the European Union's
    Seventh Framework Programme (FP7/2007-2013)
    under grant agreement no. 289016.
*/

"use strict";

var fluid = require("universal"),
    jqUnit = fluid.require("node-jqunit");

require("alsa");
var alsa = fluid.registerNamespace("gpii.alsa");

jqUnit.module("GPII Node.js ALSA Volume Bridge");

jqUnit.test("Running tests for ALSA Settings Handler", function () {
    jqUnit.expect(6);

    // Check if all required methods are available through the
    // ALSA Settings Handler.
    //
    var methods = ["getSystemVolume", "setSystemVolume", "get", "set"];
    for (var method in methods) {
        jqUnit.assertTrue("Checking availability of method '" + method + "'",
                          (methods[method] in alsa));
    }

    var payload = {
        "org.alsa-project": [{
            settings: {
                "masterVolume": 1
            }
        }]
    };

    var returnPayload = alsa.set(payload);

    jqUnit.assertDeepEq("The system volume is being setted well",
            returnPayload["org.alsa-project"][0].settings.masterVolume.newValue,
            payload["org.alsa-project"][0].settings.masterVolume);

    var newPayload = fluid.copy(payload);
    newPayload["org.alsa-project"][0].settings.masterVolume =
        returnPayload["org.alsa-project"][0].settings.masterVolume.oldValue;

    var lastPayload = alsa.set(newPayload);

    jqUnit.assertDeepEq("The system volume is being restored well",
            returnPayload["org.alsa-project"][0].settings.masterVolume.oldValue,
            lastPayload["org.alsa-project"][0].settings.masterVolume.newValue);
});
