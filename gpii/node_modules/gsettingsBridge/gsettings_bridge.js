/*
 * GPII Node.js GSettings Bridge
 *
 * Copyright 2012 Steven Githens
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

(function () {
    "use strict";

    var fluid     = require("universal"),
        gpii      = fluid.registerNamespace("gpii"),
        GSettings = require("node-gsettings");

    fluid.registerNamespace("gpii.launch");
    fluid.registerNamespace("gpii.gsettings");

    fluid.defaults("gpii.gsettings.setSingleKey", {
        gradeNames: "fluid.function",
        argumentMap: {
            schemaId: 0,
            key: 1,
            value: 2
        }
    });

    fluid.defaults("gpii.gsettings.getSingleKey", {
        gradeNames: "fluid.function",
        argumentMap: {
            schemaId: 0,
            key: 1
        }
    });

    gpii.gsettings.getSingleKey = function (schemaId, key) {
        var gSettings = new GSettings(schemaId);

        return gSettings.get(key);
    };

    gpii.gsettings.setSingleKey = function (schemaId, key, value) {
        var gSettings = new GSettings(schemaId);

        return gSettings.set(key, value);
    };

    gpii.gsettings.get = function (settingsarray) {
        var app = fluid.copy(settingsarray);
        for (var appId in app) {
            for (var j = 0; j < app[appId].length; j++) {
                var schemaId  = app[appId][j].options.schema,
                    settings  = app[appId][j].settings,
                    gSettings = new GSettings(schemaId),
                    keys      = gSettings.getKeyList();

                if (settings === null) {
                    settings = {};
                    for (var k = 0; k < keys.length; k++) {
                        var key = keys[k];
                        settings[key] = gSettings.get(key);
                    }
                }
                else {
                    for (var settingKey in settings) {
                        if (keys.indexOf(settingKey) === -1) {
                            continue;
                        }
                        settings[settingKey] = gSettings.get(settingKey);
                    }
                }
                var noOptions = { settings: settings };
                app[appId][j] = noOptions;
            }
        }
        return app;
    };

    gpii.gsettings.set = function (settingsarray) {
        var app = fluid.copy(settingsarray);
        for (var appId in app) {
            for (var j = 0; j < app[appId].length; j++) {
                var schemaId   = app[appId][j].options.schema,
                    settings   = app[appId][j].settings,
                    gSettings  = new GSettings(schemaId),
                    keys       = gSettings.getKeyList();

                for (var settingKey in settings) {
                    if (keys.indexOf(settingKey) === -1) {
                        continue;
                    }
                    var value    = settings[settingKey],
                        oldValue = gSettings.get(settingKey);
                    gSettings.set(settingKey, value);
                    settings[settingKey] = {
                        "oldValue": oldValue,
                        "newValue": value
                    };
                }
                var noOptions = { settings: settings};
                app[appId][j] = noOptions;
            }
        }
        return app;
    };

})();
