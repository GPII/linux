/*
 * GPII Node.js GSettings Bridge
 *
 * Copyright 2012 Steven Githens
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/linux/blob/master/LICENSE.txt
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 */

"use strict";

var assert = require("assert");
var gsettings = require("./build/Release/nodegsettings.node");

/* Common variables for all tests */
var keyScreenmag = "org.gnome.desktop.a11y.magnifier";

/* Test getting and setting boolean values */

var testBooleanValues = function () {
    var original = gsettings.get_gsetting(keyScreenmag, "show-cross-hairs");
    assert.deepEqual(typeof(original), "boolean", "We got a boolean as expected");

    var ret = gsettings.set_gsetting(keyScreenmag, "show-cross-hairs", true);
    assert.ok(ret);

    var actual = gsettings.get_gsetting(keyScreenmag, "show-cross-hairs");
    assert.deepStrictEqual(actual, true, "We can set boolean values");

    ret = gsettings.set_gsetting(keyScreenmag, "show-cross-hairs", original);
    assert.ok(ret);

    // Todo need to set up an event for these assertions, they run too fast,
    // and get the old value from gsettings before it's propagated.
    // exec('gsettings get '+keyScreenmag+' show-cross-hairs', function(res, out, err) {
    //     testBooleanValuesCallback1 = true;
    //     assert.equal('true\n', out);
    // });

    // exec('gsettings get '+keyScreenmag+' show-cross-hairs', function(res, out, err) {
    //     testBooleanValuesCallback2 = true;
    //     assert.equal('false\n', out);
    // });

};

var testDecimalValues = function () {
    var original = gsettings.get_gsetting(keyScreenmag, "mag-factor");
    var ret = gsettings.set_gsetting(keyScreenmag, "mag-factor", 3.0);
    assert.ok(ret);

    var actual = gsettings.get_gsetting(keyScreenmag, "mag-factor");
    assert.deepStrictEqual(actual, 3.0, "We can set decimal values");

    var ret2 = gsettings.set_gsetting(keyScreenmag, "mag-factor", 5.3);
    assert.ok(ret2);
    actual = gsettings.get_gsetting(keyScreenmag, "mag-factor");
    assert.deepStrictEqual(actual, 5.3, "We can set decimal values");

    var ret3 = gsettings.set_gsetting(keyScreenmag, "mag-factor", original);
    assert.ok(ret3);
};

var testStringValues = function () {
    var original = gsettings.get_gsetting(keyScreenmag, "screen-position");
    var ret = gsettings.set_gsetting(keyScreenmag, "screen-position", "left-half");
    assert.ok(ret);
    var actual = gsettings.get_gsetting(keyScreenmag, "screen-position");
    assert.deepStrictEqual(actual, "left-half", "We can set string values");
    var ret2 = gsettings.set_gsetting(keyScreenmag, "screen-position", original);
    assert.ok(ret2);
};

var testIntegerValues = function () {
    var original = gsettings.get_gsetting(keyScreenmag, "cross-hairs-thickness");
    var ret = gsettings.set_gsetting(keyScreenmag, "cross-hairs-thickness", 7);
    assert.ok(ret);
    var actual = gsettings.get_gsetting(keyScreenmag, "cross-hairs-thickness");
    assert.deepStrictEqual(actual, 7, "We can set integer values");
    var ret2 = gsettings.set_gsetting(keyScreenmag, "cross-hairs-thickness", original);
    assert.ok(ret2);
};

var testListKeys = function () {
    var keys = gsettings.get_gsetting_keys(keyScreenmag);
    assert.ok(Array.isArray(keys));
    for (var i = 0; i < keys.length; i++) {
        assert.ok("string", typeof(keys[i]));
    }
};

/* Run test functions */
testBooleanValues();
testDecimalValues();
testStringValues();
testIntegerValues();
testListKeys();
