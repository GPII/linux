/*
 * GPII Orca Settings Handler
 *
 * Copyright 2013-2015 Emergya
 * Copyright 2015-2016 RtF-US
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

(function () {
    "use strict";

    var fluid = require("universal");
    var gpii = fluid.registerNamespace("gpii");
    var fs = require("fs");
    var spawn = require("child_process").spawn;
    var path = require("path");

    var HOME = process.env.HOME;
    var XDG_DATA_HOME = process.env.XDG_DATA_HOME || path.resolve(HOME, ".local/share");
    var orcaSettingsFile = path.resolve(XDG_DATA_HOME, "orca/user-settings.conf");

    var ORCA_ARGS = ["--disable", "speech",
                     "--disable", "braille",
                     "--disable", "braille-monitor",
                     "--disable", "main-window",
                     "--disable", "splash-window"];

    // When Orca is referencing a profile in a setting, it uses an array
    // containing the profile's name and id.
    // ie: startingProfile: ["Default", "default"]
    //
    // But profiles are stored in the 'profiles' section as an object,
    // which main key equals to the profile's id. As we need to retrieve a
    // specific profile under 'profiles' section, we need to get the second
    // value (the id) from the array.
    //
    var PROFILE_ID = 1;

    function wait(millis) {
        var date = new Date();
        var curDate;

        do { curDate = new Date(); }
        while (curDate - date < millis);
    }

    fluid.registerNamespace("gpii.launch");
    fluid.registerNamespace("gpii.orca");

    fluid.defaults("gpii.orca.settingsHandler", {
        gradeNames: ["fluid.modelComponent"],
        changeApplierOptions: {
            resolverGetConfig: fluid.model.escapedGetConfig,
            resolverSetConfig: fluid.model.escapedSetConfig
        },
        model: {
            settings: {}
        },
        invokers: {
            get: {
                funcName: "gpii.orca.settingsHandler.get",
                args: ["{that}", "{arguments}.0"]
            },
            set: {
                funcName: "gpii.orca.settingsHandler.set",
                args: ["{that}", "{arguments}.0"]
            },
            getImpl: {
                funcName: "gpii.orca.settingsHandler.getImpl",
                args: ["{that}", "{arguments}.0"]
            },
            setImpl: {
                funcName: "gpii.orca.settingsHandler.setImpl",
                args: ["{that}", "{arguments}.0"]
            },
            readSettingsFile: {
                funcName: "gpii.orca.settingsHandler.readSettingsFile",
                args: "{that}"
            }
        }
    });

    gpii.orca.settingsHandler.readSettingsFile = function (that) {
        var userSettings = fs.readFileSync(orcaSettingsFile);
        that.applier.change("settings", {});
        that.applier.change("settings", JSON.parse(userSettings));
    };

    gpii.orca.settingsHandler.makeConfigurable = function () {
        var orcaSpawn = spawn("orca", ORCA_ARGS);
        var pass = 0;
        var maxPass = 10;
        var err;

        while (!fs.existsSync(orcaSettingsFile)) {
            if (pass === maxPass) {
                err = "Time limit exceeded [" + maxPass * 500 +
                      "ms] for creating Orca's configuration file";
                break;
            }
            wait(500);
            pass++;
        }

        orcaSpawn.kill("SIGKILL");
        return err;
    };

    gpii.orca.settingsHandler.getImpl = function (that, payload) {
        var togo;
        var exists = fs.existsSync(orcaSettingsFile);

        var getSettings = function () {
            that.readSettingsFile();
            var profile = that.model.settings.general.activeProfile[PROFILE_ID];
            var results = fluid.transform(payload.settings, function (value, key) {
                var currentValue = fluid.get(that.model.settings, ["profiles", profile, key]);
                return currentValue;
            });

            return results;
        };

        if (exists) {
            togo = getSettings();
        } else {
            togo = fluid.promise();
            var err = gpii.orca.settingsHandler.makeConfigurable();
            if (err) {
                togo.reject(err);
                fluid.fail(err);
            } else {
                var results = getSettings();
                togo.resolve(results);
            }
        }

        return togo;
    };

    gpii.orca.settingsHandler.setImpl = function (that, payload) {
        var togo;
        var exists = fs.existsSync(orcaSettingsFile);

        var setSettings = function () {
            that.readSettingsFile();
            var profile = that.model.settings.general.activeProfile[PROFILE_ID];

            var results = fluid.transform(payload.settings, function (value, key) {
                var oldValue = fluid.get(that.model.settings, ["profiles", profile, key]);
                var type = value === undefined ? "DELETE" : "ADD";
                that.applier.change(["settings", "profiles", profile, key], value, type);

                var newValue = fluid.get(that.model.settings, ["profiles", profile, key]);

                return {
                    oldValue: oldValue,
                    newValue: newValue
                };
            });

            fs.writeFileSync(orcaSettingsFile, JSON.stringify(that.model.settings, null, 4));
            return results;
        };

        if (exists) {
            togo = setSettings();
        } else {
            togo = fluid.promise();
            var err = gpii.orca.settingsHandler.makeConfigurable();
            if (err) {
                togo.reject(err);
                fluid.fail(err);
            } else {
                var results = setSettings();
                togo.resolve(results);
            }
        }

        return togo;
    };

    gpii.orca.settingsHandler.get = function (that, payload) {
        return gpii.settingsHandlers.invokeSettingsHandler(that.getImpl, payload);
    };

    gpii.orca.settingsHandler.set = function (that, payload) {
        return gpii.settingsHandlers.invokeSettingsHandler(that.setImpl, payload);
    };

    var orcaSettingsHandler = gpii.orca.settingsHandler();

    gpii.orca.get = orcaSettingsHandler.get;
    gpii.orca.set = orcaSettingsHandler.set;

})();
