/*
 * Orca Settings Handler Tests
 *
 * Copyright 2013 Emergya
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("universal"),
    jqUnit = fluid.require("jqUnit");

require("orca");
var orca = fluid.registerNamespace("gpii.orca");

jqUnit.module("OrcaSettingsHandler Module");

jqUnit.test("Running tests for Orca Settings Handler", function () {

    // Complete get/set flow
    //
    var getPayload = {
        "org.gnome.orca": [{
            "settings": {
                "enableBraille": null,
                "enableEchoByWord": null,
                "enableEchoByCharacter": null,
                "voices.default.rate": null,
                "enableTutorialMessages": null,
                "voices.default.family": null,
                "verbalizePunctuationStyle": null
            }
        }]
    };
    var defaultSettingsPayload = orca.get(getPayload);
    jqUnit.assertTrue("orca.get is returning a valid Object", defaultSettingsPayload);

    var setPayload = {
        "org.gnome.orca": [{
            "settings": {
                "enableBraille": true,
                "enableEchoByWord": true,
                "enableEchoByCharacter": false,
                "voices.default.rate": 100,
                "enableTutorialMessages": false,
                "voices.default.family": { "locale": "es", "name": "spanish-latin-american" },
                "verbalizePunctuationStyle": 0
            }
        }]
    };

    var returnPayload = orca.set(setPayload);
    var settings = fluid.copy(returnPayload["org.gnome.orca"][0].settings);
    fluid.each(settings, function (v, k) {
        var expectedValue = setPayload["org.gnome.orca"][0].settings[k];
        jqUnit.assertDeepEq("Setting " + k + " is being set well", expectedValue, v["newValue"]);
    });

    var returnGetPayload = orca.get(getPayload);
    jqUnit.assertDeepEq("Get payload is as expected after updating the settings", returnGetPayload, setPayload);

    var restoreReturnPayload = orca.set(defaultSettingsPayload);
    var currentSettingsPayload = orca.get(getPayload);
    jqUnit.assertDeepEq("Settings are being restored well", currentSettingsPayload, defaultSettingsPayload);

    // Complete get/set flow with non-existent settings.
    //
    var getPayload2 = {
        "org.gnome.orca": [{
            "settings": {
                "foo": null,
                "cat.name": null,
                "cat.age": null
            }
        }]
    };

    var defaultSettingsPayload2 = orca.get(getPayload2);

    var setPayload2 = {
        "org.gnome.orca": [{
            "settings": {
                "foo": "bar",
                "cat.name": "CATTT",
                "cat.age": 3
            }
        }]
    };

    var returnPayload2 = orca.set(setPayload2);
    var settings = fluid.copy(returnPayload2["org.gnome.orca"][0].settings);
    fluid.each(settings, function (v, k) {
        var expectedValue = setPayload2["org.gnome.orca"][0].settings[k];
        jqUnit.assertDeepEq("Non-existent setting " + k + " is being set well", expectedValue, v["newValue"]);
    });

    // Restore the settings
    var restoreReturnPayload2 = orca.set(defaultSettingsPayload2);
    var currentSettingsPayload2 = orca.get(getPayload2);
    jqUnit.assertDeepEq("Non-existent settings are being restored well", currentSettingsPayload2, defaultSettingsPayload2);

});
