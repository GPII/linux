/*
 * Orca Settings Handler Tests
 *
 * Copyright 2013, 2014 Emergya
 * Copyright 2015 RtF-US
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 */

"use strict";

var fluid = require("universal"),
    fs = require("fs"),
    path = require("path"),
    jqUnit = fluid.require("node-jqunit");

require("orca");
var gpii = fluid.registerNamespace("gpii");
var orca = fluid.registerNamespace("gpii.orca");

jqUnit.module("OrcaSettingsHandler Module");

jqUnit.test("Running tests for Orca Settings Handler", function () {

    // Complete get/set flow
    //
    var getPayload = {
        "org.gnome.orca": [{
            "settings": {
                "enableBraille": null,
                "enableEchoByWord": null,
                "enableEchoByCharacter": null,
                "voices.default.rate": null,
                "enableTutorialMessages": null,
                "voices.default.family": null,
                "verbalizePunctuationStyle": null
            }
        }]
    };
    var defaultSettingsPayload = gpii.resolveSync(orca.get(getPayload));
    jqUnit.assertTrue("orca.get is returning a valid Object", defaultSettingsPayload);

    var setPayload = {
        "org.gnome.orca": [{
            "settings": {
                "enableBraille": true,
                "enableEchoByWord": true,
                "enableEchoByCharacter": false,
                "voices.default.rate": 100,
                "enableTutorialMessages": false,
                "voices.default.family": { "locale": "es", "name": "spanish-latin-american" },
                "verbalizePunctuationStyle": 0
            }
        }]
    };

    var returnPayload = gpii.resolveSync(orca.set(setPayload));
    var settings = returnPayload["org.gnome.orca"][0].settings;

    fluid.each(settings, function (v, k) {
        var expectedValue = setPayload["org.gnome.orca"][0].settings[k];
        jqUnit.assertDeepEq("Setting " + k + " is being set well", expectedValue, v.newValue);
    });

    var returnGetPayload = gpii.resolveSync(orca.get(getPayload));
    jqUnit.assertDeepEq("Get payload is as expected after updating the settings", returnGetPayload, setPayload);

    orca.set(defaultSettingsPayload);
    var currentSettingsPayload = gpii.resolveSync(orca.get(getPayload));
    jqUnit.assertDeepEq("Settings are being restored well", currentSettingsPayload, defaultSettingsPayload);

    // Complete get/set flow with non-existent settings.
    //
    var getPayload2 = {
        "data": [{
            "settings": {
                "foo": null,
                "cat.name": null,
                "cat.age": null
            }
        }]
    };

    var defaultSettingsPayload2 = gpii.resolveSync(orca.get(getPayload2));

    var setPayload2 = {
        "data": [{
            "settings": {
                "foo": "bar",
                "cat.name": "CATTT",
                "cat.age": 3
            }
        }]
    };

    var returnPayload2 = gpii.resolveSync(orca.set(setPayload2));
    var settings2 = fluid.copy(returnPayload2.data[0].settings);
    fluid.each(settings2, function (v, k) {
        var expectedValue = setPayload2.data[0].settings[k];
        jqUnit.assertDeepEq("Non-existent setting " + k + " is being set well", expectedValue, v.newValue);
    });

    // Restore the settings
    orca.set(defaultSettingsPayload2);
    var currentSettingsPayload2 = gpii.resolveSync(orca.get(getPayload2));
    jqUnit.assertDeepEq("Non-existent settings are being restored well", currentSettingsPayload2, defaultSettingsPayload2);

    // Check that 'foo' and 'cat' are removed properly from Orca's config file
    var HOME = process.env.HOME;
    var XDG_DATA_HOME = process.env.XDG_DATA_HOME || path.resolve(HOME, ".local/share");
    var orcaSettingsFile = path.resolve(XDG_DATA_HOME, "orca/user-settings.conf");

    var content = JSON.parse(fs.readFileSync(orcaSettingsFile));
    var profile = content.general.activeProfile[1];
    var settings = content.profiles[profile];
    jqUnit.assertFalse("No 'foo' setting in Orca's config file", settings.hasOwnProperty("foo"));
    jqUnit.assertFalse("No 'cat' setting in Orca's config file", settings.hasOwnProperty("cat"));

    // Complete get/set flow with multiple solution entries.
    //
    var getPayload3 = {
        "data": [{
            "settings": {
                "foo": null
            }
        }],
        "otherData": [{
            "settings": {
                "john": null
            }
        }]
    };

    var defaultSettingsPayload3 = gpii.resolveSync(orca.get(getPayload3));

    var setPayload3 = {
        "data": [{
            "settings": {
                "foo": "bar"
            }
        }],
        "otherData": [{
            "settings": {
                "john": "doe"
            }
        }]
    };

    orca.set(setPayload3);

    // Restore the settings
    orca.set(defaultSettingsPayload3);
    var currentSettingsPayload3 = gpii.resolveSync(orca.get(getPayload3));
    jqUnit.assertDeepEq("Non-existent settings are being restored well", currentSettingsPayload3, defaultSettingsPayload3);

});
