/*
 * Orca Settings Handler Tests
 *
 * Copyright 2013, 2014 Emergya
 * Copyright 2015, 2016 RtF-US
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/linux/blob/master/LICENSE.txt
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 */

"use strict";

var fluid = require("gpii-universal"),
    jqUnit = fluid.require("node-jqunit");

require("orca");
var gpii = fluid.registerNamespace("gpii");

fluid.defaults("gpii.test.orca", {
    gradeNames: ["fluid.test.testEnvironment"],
    components: {
        tester: {
            type: "gpii.test.orca.tester"
        }
    }
});

fluid.defaults("gpii.test.orca.tester", {
    gradeNames: ["fluid.test.testCaseHolder"],
    payloads: null,
    originalSettings: null,
    components: {
        orcaSettingsHandler: {
            type: "gpii.orca.settingsHandler"
        }
    },
    events: {
        onGetReturnPayload: null,
        onSetReturnPayload: null
    },
    listeners: {
        onCreate: {
            funcName: "gpii.test.orca.tester.populate",
            args: ["{that}"]
        }
    },
    modules: [{
        name: "Orca Settings Handler Tests",
        tests: [{
           //expect: 13,
            name: "Get/Set tests",
            sequence: [{  // Check that we can retrieve settings
                func: "gpii.test.orca.get",
                args: ["{tester}", "{tester}.payloads.getPayload"]
            }, {
                listener: "gpii.test.orca.checkGetPayload",
                event: "{that}.events.onGetReturnPayload",
                args: ["{that}", "{arguments}.0"]
            }, {  // Check that set returns the expected payload
                func: "gpii.test.orca.set",
                args: ["{tester}", "{tester}.payloads.setPayload"]
            }, {
                listener: "gpii.test.orca.checkSetPayload",
                event: "{that}.events.onSetReturnPayload",
                args: ["{arguments}.0", "{tester}.payloads.setPayload"]
            }, {  // Check that settings are applied
                func: "gpii.test.orca.get",
                args: ["{tester}", "{tester}.payloads.getPayload"]
            }, {
                listener: "gpii.test.orca.checkActualSettings",
                event: "{that}.events.onGetReturnPayload",
                args: ["{arguments}.0", "{tester}.payloads.setPayload"]
            }, {  // Restore to the initial settings and check returned payload
                func: "gpii.test.orca.set",
                args: ["{tester}", "{tester}.originalSettings"]
            }, {
                listener: "gpii.test.orca.checkSetPayload",
                event: "{that}.events.onSetReturnPayload",
                args: ["{arguments}.0", "{tester}.originalSettings"]
            }, {  // Check that settings are back to its original values
                func: "gpii.test.orca.get",
                args: ["{tester}", "{tester}.payloads.getPayload"]
            }, {
                listener: "gpii.test.orca.checkActualSettings",
                event: "{that}.events.onGetReturnPayload",
                args: ["{arguments}.0", "{tester}.originalSettings"]
            }]
        }]
    }]
});

gpii.test.orca.tester.populate = function (that) {
    that.payloads = require(__dirname + "/payloads.json");
};

gpii.test.orca.get = function (that, payload) {
    var getPromise = that.orcaSettingsHandler.get(payload);
    getPromise.then(function (results) {
        that.events.onGetReturnPayload.fire(results);
    }, function (err) {
        fluid.fail(err);
    });
};

gpii.test.orca.set = function (that, payload) {
    var setPromise = that.orcaSettingsHandler.set(payload);
    setPromise.then(function (results) {
        that.events.onSetReturnPayload.fire(results);
    }, function (err) {
        fluid.fail(err);
    });
};

gpii.test.orca.checkGetPayload = function (that, results) {
    that.originalSettings = results;
    jqUnit.assertTrue("We can get settings from orca settings file",
                      (typeof(results) === "object"));
};

gpii.test.orca.checkSetPayload = function (results, payload) {
    fluid.each(results, function (solution, solutionId) {
        var settings = results[solutionId][0].settings;
        fluid.each(settings, function (v, k) {
            var expectedValue = payload[solutionId][0].settings[k];
            jqUnit.assertDeepEq("Setting " + k + " is being set well",
                                expectedValue, v.newValue);
        });
    });
};

gpii.test.orca.checkActualSettings = function (results, expected) {
    jqUnit.assertDeepEq("Orca config file contains the expected settings",
                        expected, results);
};

gpii.test.orca();
