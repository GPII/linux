/*!
GPII Node.js PackageKit Bridge

Copyright 2012 Steven Githens
Copyright 2013, 2014 Inclusive Design Research Centre, OCAD University
Copyright 2013, 2014 Emergya

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

"use strict";

var fluid = require("gpii-universal"),
    jqUnit = fluid.require("node-jqunit"),
    gpii = fluid.registerNamespace("gpii"),
    packagekit = require("./build/Release/nodepackagekit.node");

fluid.registerNamespace("gpii.tests.packageKit");

gpii.tests.packageKit.isInstalled = function (pkg) {
    return (!!pkg && (pkg.data.indexOf("installed") !== -1));
};

gpii.tests.packageKit.findGlib2 = function (aPkg) {
    return aPkg.name === "glib2";
};

gpii.tests.packageKit.findPackageByName = function (name, pkgArray) {
    return fluid.find(pkgArray, function (aPkg) {
        if (aPkg.name === name) {
            return aPkg;
        }
    }, null);
};

// Return the package that matches name, version, and architecture.
gpii.tests.packageKit.getMatchingPackage = function (pkg, pkgList) {
    return fluid.find(pkgList, function (aPkg) {
        if (aPkg.name === pkg.name &&
            aPkg.version === pkg.version &&
            aPkg.arch === pkg.arch) {
            return aPkg;
        }
    }, null);
};

gpii.tests.packageKit.initTuxguitar = function () {
    var tuxguitar = {
        pkgList: [],
        pkg: null,
        inInstalledList: false,
        inAvailableList: false
    };
    var pkgs = packagekit.searchPackage("tuxguitar");
    tuxguitar.pkgList = pkgs;
    tuxguitar.pkg = gpii.tests.packageKit.findPackageByName("tuxguitar", pkgs);
    return tuxguitar;
};

gpii.tests.packageKit.isTuxguitarInList = function (tuxguitar, pkgList) {
    var matchPkg = gpii.tests.packageKit.getMatchingPackage(tuxguitar.pkg, pkgList);
    return (matchPkg !== null);
};

// GPII-1081: compensate for change in PackageKit between v0.8.17 and
// v1.0.3.  In the later version, even when installed, the same package
// appears in the list of available packages.  In v0.8.17 it did not.
//
gpii.tests.packageKit.availableNotInstalled = function (tuxguitar, availablePkgs) {
    var isAvailable = gpii.tests.packageKit.isTuxguitarInList(tuxguitar, availablePkgs);
    if (tuxguitar.inInstalledList && isAvailable) {
        var installedMatchesAvailablePkg =
        gpii.tests.packageKit.getMatchingPackage(tuxguitar.pkg, availablePkgs);

        if (installedMatchesAvailablePkg !== null) {
            tuxguitar.inAvailableList = false;
        }
        else {
            tuxguitar.inAvailableList = true;
        }
    }
    else {
        tuxguitar.inAvailableList = isAvailable;
    }
};

gpii.tests.packageKit.initSearchTest = function () {
    var tuxguitar = gpii.tests.packageKit.initTuxguitar();
    var installedPkgs = packagekit.searchPackage("tuxguitar", "installed");
    tuxguitar.inInstalledList =
    gpii.tests.packageKit.isTuxguitarInList(tuxguitar, installedPkgs);

    var availablePkgs = packagekit.searchPackage("tuxguitar", "~installed");
    gpii.tests.packageKit.availableNotInstalled(tuxguitar, availablePkgs);

    return tuxguitar;
};

gpii.tests.packageKit.initGetTest = function () {
    var tuxguitar = gpii.tests.packageKit.initTuxguitar();
    var installedPkgs = packagekit.getPackages("installed");
    tuxguitar.inInstalledList =
    gpii.tests.packageKit.isTuxguitarInList(tuxguitar, installedPkgs);

    var availablePkgs = packagekit.getPackages("~installed");
    gpii.tests.packageKit.availableNotInstalled(tuxguitar, availablePkgs);

    return tuxguitar;
};

gpii.tests.packageKit.runInstalledVsAvailableTests = function (tuxguitar, msg) {
    // Depending on whether tuxguitar is installed on not, check that it
    // appears  correctly in the installed or available lists.
    if (gpii.tests.packageKit.isInstalled(tuxguitar.pkg)) {
        jqUnit.assertTrue(msg + " 'tuxguitar' in installed packages list",
                          tuxguitar.inInstalledList);
        jqUnit.assertFalse(msg + " 'tuxguitar' not in available packages " +
                           "list", tuxguitar.inAvailableList);
    }
    else {
        jqUnit.assertFalse(msg + " 'tuxguitar' not in installed packages " +
                           "list", tuxguitar.inInstalledList);
        jqUnit.assertTrue(msg + " 'tuxguitar' is in available packages list",
                          tuxguitar.inAvailableList);
    }
};

gpii.tests.packageKit.searchForMatch = function (tuxguitar, searchFilter) {
    var pkgs = packagekit.searchPackage("tuxguitar", searchFilter);
    return gpii.tests.packageKit.getMatchingPackage(tuxguitar.pkg, pkgs);
};

gpii.tests.packageKit.testRemovePackage = function (tuxguitar, matchPkg) {
    var id = (matchPkg !== null ? matchPkg.id : tuxguitar.pkg.id);

    // GPII-880:  The 'remove' action requires an administrator password.
    // Packagekit invokes PolKit authentication, putting up a dialog to
    // capture aforesaid password.  This needs to be automated.
    packagekit.performAction("remove", id);
    matchPkg = gpii.tests.packageKit.searchForMatch(tuxguitar, "~installed");
    jqUnit.assertNotNull("Remove tuxguitar package", matchPkg);
    return matchPkg;
};

gpii.tests.packageKit.testInstallPackage = function (tuxguitar, matchPkg) {
    var id = (matchPkg !== null ? matchPkg.id : tuxguitar.pkg.id);
    packagekit.performAction("install", id);
    matchPkg = gpii.tests.packageKit.searchForMatch(tuxguitar, "installed");
    jqUnit.assertNotNull("Install tuxguitar package", matchPkg);
    return matchPkg;
};

gpii.tests.packageKit.testPerformActionFailure = function () {
    var errMsg = "No Error Message";
    try {
        packagekit.performAction("foo", "bar");
    }
    catch (error) {
        errMsg = error.message;
    }
    return errMsg;
};

jqUnit.module("PackageKit Bridge node add-on module");

jqUnit.test(
    "Test searchPackage() of 'glib2' with implicit 'none' filter, meaning " +
    "installed or available.", function () {

    // Packagekit-glib -- the code this add-on invokes -- itself depends on
    // glib2.  It must be installed, if this is running.
    var pkgs = packagekit.searchPackage("glib2");
    var found = pkgs.some(gpii.tests.packageKit.findGlib2);
    jqUnit.assertTrue("Search 'glib2', implicit 'none' filter", found);
});

jqUnit.test("Test searchPackage() 'glib2' with explicit 'none' filter.", function () {
    var pkgs = packagekit.searchPackage("glib2", "none");
    var found = pkgs.some(gpii.tests.packageKit.findGlib2);
    jqUnit.assertTrue("Search 'glib2', explicit 'none' filter", found);
});

jqUnit.test("Test searchFiles() for '/usr/bin/ls'.", function () {

    // The searchFiles() function expects the full path name where the package
    // would be installed, even it if is not installed.  Check using the
    // common utility 'ls'.
    var pkgs = packagekit.searchFiles("/usr/bin/ls");
    jqUnit.assertNotEquals(
        "Search file '/usr/bin/ls', implicit 'none' filter", 0, pkgs.length
    );
    jqUnit.assertTrue("'ls' is installed", gpii.tests.packageKit.isInstalled(pkgs[0]));
});

jqUnit.test("Test searchPackage() with 'tuxguitar' comparing installed " +
             "vs. available filters.", function () {

    // Test the "installed" vs. "~installed" filters with regards to
    // 'tuxguitar', and the array of packages returned by searchPackage()
    // using the filters.  Use the tuxguitar package, whether installed or
    // not, to test against the two arrays.
    var tuxguitar = gpii.tests.packageKit.initSearchTest();
    gpii.tests.packageKit.runInstalledVsAvailableTests(tuxguitar, "Search");
});

jqUnit.test("Test getPackages() with tuxguitar comparing installed vs. " +
            "available filters.", function () {
    var tuxguitar = gpii.tests.packageKit.initGetTest();
    gpii.tests.packageKit.runInstalledVsAvailableTests(tuxguitar, "Get");
});

jqUnit.test("Test performAction(): 'install' and 'remove' tuxguitar." +
            "  The order depends on whether tuxguitar is currently " +
            "installed.", function () {

    // GPII-880:  The 'remove' test requires an administrator password.
    // Packagekit invokes PolKit authentication, putting up a dialog to
    // capture aforesaid password.  This needs to be automated.

    // Using the tuxguitar package:  If it's installed, test removing it and
    // then (re)install it ...
    var matchPkg;
    var tuxguitar = gpii.tests.packageKit.initTuxguitar();
    if (gpii.tests.packageKit.isInstalled(tuxguitar.pkg)) {
        matchPkg = gpii.tests.packageKit.testRemovePackage(tuxguitar, null);
        gpii.tests.packageKit.testInstallPackage(tuxguitar, matchPkg);
    }
    // ...if it isn't installed, test installing it and then removing it.
    else {
        matchPkg = gpii.tests.packageKit.testInstallPackage(tuxguitar, null);
        gpii.tests.packageKit.testRemovePackage(tuxguitar, matchPkg);
    }
});

jqUnit.test("Test performAction() with invalid argments", function () {
    var errorMessage = gpii.tests.packageKit.testPerformActionFailure();
    jqUnit.assertEquals(
        "Result of ThrowError():",
        "You have to provide the action to be performed, either " +
        "'install', 'update' or 'remove'",
        errorMessage
    );
});

jqUnit.test("Test updatePackage(): with 'emacspeak'", function () {

    // The package ids of an old and newer version of 'emacspeak'.
    // TODO:  JS:  While the following check against two version of
    // 'emacspeak' works on Fedora-20, it may not work on all distros; hence,
    // the check that searchPackage() finds the two versions. If so, the test
    // is run; otherwise no test is run.  Need to find a better way to find
    // multiple versions of a package to test against.
    var oldEmacspeak = "38.0-5.fc20";
    var newEmacspeak = "39.0-1.fc20";
    var pkgs = packagekit.searchPackage("emacspseak");
    if (pkgs.length === 2 &&
        (pkgs[0].version === oldEmacspeak &&
         pkgs[1].version === newEmacspeak &&
         pkgs[1].data.indexOf("updates") !== -1)) {

        packagekit.updatePackage(pkgs[1].id);
        var currentPkgs = packagekit.searchPackage("emacspseak", "installed");
        jqUnit.assertEquals("Updating to " + newEmacspeak,
                            currentPkgs[0].version, newEmacspeak);

        // Restore to previous.
        packagekit.removePackage(currentPkgs[0].id);
    }
    else {
        jqUnit.assertTrue("Cannot test update of emacspeak as there are no " +
                          "updates", true);
    }
});
