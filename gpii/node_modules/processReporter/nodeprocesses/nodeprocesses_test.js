/*!
GPII Node.js Processes Add-on

Copyright 2014 Inclusive Design Research Centre, OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/*global require*/

(function () {
    "use strict";

    var path = require("path"),
        fluid = require("universal"),
        jqUnit = fluid.require("jqUnit"),
        nodeProcesses = require("./build/Release/nodeprocesses.node");

    var procTests = fluid.registerNamespace("gpii.tests.processes");

    // Return the process info object that matches the given process id.
    // Note that it can return "null" meaning there is no such process running.
    procTests.matchProcByPid = function (pid, procArray) {
        if (!procArray) {
            procArray = nodeProcesses.getProcesses();
        }
        return fluid.find(procArray, function (procInfo) {
            if (procInfo.pid === pid) {
                return procInfo;
            }
        }, null);
    };

    jqUnit.module("Processes Bridge node add-on module");

    jqUnit.test(
        "Test getProceses() with 'node' (the nodejs process itself)",
        function () {
            var procInfos = nodeProcesses.getProcesses();
            jqUnit.assertNotEquals(
                "Getting all processes", 0, procInfos.length
            );

            // Check for the presence of this nodejs processs itself -- it must
            // be in the process list since this code is running inside that
            // process.
            var nodeProcInfo = procTests.matchProcByPid(process.pid, procInfos);
            jqUnit.assertNotNull("Searching for 'node' process", nodeProcInfo);
            jqUnit.assertEquals("Node process 'name'",
                process.title, nodeProcInfo.command
            );
            // TODO:  Redundant?  This is how it was found.
            jqUnit.assertEquals("Node process 'pid'",
                process.pid, nodeProcInfo.pid
            );
            jqUnit.assertEquals("Node process 'uid'",
                process.getuid(), nodeProcInfo.uid
            );
            jqUnit.assertEquals("Node process 'gid'",
                process.getgid(), nodeProcInfo.gid
            );
            jqUnit.assertEquals("Node process 'argv' length'",
                process.argv.length, nodeProcInfo.argv.length
            );
            jqUnit.assertEquals("Node process status",
                "Running", nodeProcInfo.state
            );

            // Loop to compare nodejs argument vector against the one found by
            // by procTests.getProcesses().  Note that the linux add-on (libgtop)
            // returns a path relative to the current directory for argv[1],
            // whereas node reports the full path.  Compare using Path.resolve().
            for (var i = 0; i < process.argv.length; i++) {
                var processArg = process.argv[i];
                var nodeProcInfoArg = nodeProcInfo.argv[i];
                if (i === 1) {
                    processArg = path.resolve(processArg);
                    nodeProcInfoArg = path.resolve(nodeProcInfoArg);
                }
                jqUnit.assertEquals("Node process 'argv[" + i + "]'",
                    processArg, nodeProcInfoArg
                );
            }
        });
}());
