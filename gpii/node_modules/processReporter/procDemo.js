/*!
GPII Prcoess Bridge Demo.

Copyright 2014 Inclusive Design Research Centre, OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/*global require */
"use strict";

var readline = require ("readline");
var fluid = require("universal");
require ("./processes.js");

var gpii = fluid.registerNamespace ("gpii");
gpii.processes = fluid.registerNamespace ("gpii.processes");
var processes = gpii.processes();

var seekInput = readline.createInterface ({
  input: process.stdin,
  output: process.stdout
});

// Handler for processes to use to detect change from "not running" to "running"
// or "running" to "not running".  For this demo, just print the new run state
// on the console.
var runStateChangeHandler = function (procInfo) {
  console.log (
    procInfo.command + ": run state switched to " + procInfo.state +
    " (" +
    ( processes.isRunning (procInfo.state) ? "Running" : "Stopped" ) + 
    ")"
  );
};

// Handler to use to detect any change in state, and print to console.
var stateChangeHandler = function (oldProcInfo, newProcInfo) {
  console.log (
    oldProcInfo.command + " process state switched from " + 
    oldProcInfo.state + " to " + newProcInfo.state
  );
};


// Initial assumption:  not running.  Then look for any running orca process.
var orcaProcInfo = processes.initProcInfoNotRunning ("orca");
var orcaProcInfos = processes.findProcessesByCommand ("orca");
if (orcaProcInfos.length > 0) {
  orcaProcInfo = orcaProcInfos[0];
}

// Start the periodic check of the change in run-state for orca.
// To see any changes, state/stop orca using, say, the accessibility menu, or
// the command line:
// gsettings set org.gnome.desktop.a11y.applications screen-reader-enabled true/false
var states = {};
states.trackRunState = processes.trackRunState (orcaProcInfo, runStateChangeHandler);
states.trackState = processes.trackState (orcaProcInfo, stateChangeHandler);

console.log ("Waiting...");

seekInput.question ("Stop? ", function (answer) {
  console.log ("You said " + answer);
  if (answer === "yes") {
    console.log ("Okay, stopping");

    // Cease periodic check of orca's state.
    processes.stopTrackingRunState (runStateChangeHandler, states.trackRunState);
    processes.stopTrackingState (stateChangeHandler, states.trackState);
    seekInput.close();
  }
  else {
    console.log ("Okay, continuing");
  }
});
