/**
 * GPII Process Reporter Bridge (Linux -- GLiBTop).
 *
 * Copyright 2015 OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/gpii/universal/LICENSE.txt
 */

"use strict";

var fluid = require("universal");
var gpii = fluid.registerNamespace("gpii");
require("./processesBridge.js");

var processes = gpii.processes();

fluid.require("gsettingsBridge", require);
var gsettings = fluid.registerNamespace("gpii.gsettings");

fluid.registerNamespace("gpii.processReporter");
fluid.defaults("gpii.processReporter.find", {
    gradeNames: "fluid.function",
    argumentMap: {
        command: 0
    }
});

fluid.defaults("gpii.processReporter.checkSetting", {
    gradeNames: "fluid.function",
    argumentMap: {
        schema: 0,
        setting: 1,
        value: 2
    }
});

// Search for the process using its command name.  Returns a boolean indicating
// if the process is running.
gpii.processReporter.find = function (commandName) {
    var running = false;
    var procInfos = processes.findSolutionsByCommands([commandName]);
    var theProcess = fluid.find(procInfos, function (aProcInfo) {
        if (aProcInfo.uid === process.getuid()) {
            return aProcInfo;
        }
    }, null);

    if (theProcess !== null) {
        running = processes.isRunning(theProcess.state);
    }
    return running;
};

// Check if the given GSetting is set.  Returns a boolean indicating whether the
// setting is set.
gpii.processReporter.checkSetting = function (schema, setting, value) {
    var actualValue = undefined;
    if (schema && setting) {
        actualValue = gsettings.getSingleKey(schema, setting);
    }
    return value === actualValue;
};

