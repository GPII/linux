/*!
GPII Node.js Processes Bridge

Copyright 2014 Inclusive Design Research Centre, OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/*global require*/

(function() {
    "use strict";

  var path = require ("path"),
      spawn = require("child_process").spawn,
      fluid = require ("universal"),
      jqUnit = fluid.require ("jqUnit"),

    // TODO:  Must be a better way to get node gsettings add-on.
    nodeGSettings = require ("../gsettingsBridge/nodegsettings/build/Release/nodegsettings.node");
    require ("./processReporter.js");

    var processReporter = fluid.registerNamespace ("gpii.processReporter");
    var procTests = fluid.registerNamespace ("gpii.tests.processes");

    // Delay 5 seconds.
    procTests.wait5sec = function() {
      var t0 = Date.now();
      var longEnough = false;
      while (!longEnough) {
        longEnough = ((Date.now() - t0) > 5000);
      }
    };

    jqUnit.module ("Processes Bridge node add-on module");
    jqUnit.test (
      "Test getProceses()/findProcessByPid() with the nodejs process itself",
      function() {
        var procInfos = processReporter.getProcessList();
        jqUnit.assertNotEquals (
            "Listing all processes", 0, procInfos.length
        );

        // Check for the presence of this nodejs processs itself -- it must
        // be in the process list since this code is running inside that
        // process.
        var nodeProc = processReporter.findProcessByPid (process.pid, procInfos);
        jqUnit.assertNotNull ("Searching for 'node' process", nodeProc);
    });

    jqUnit.test (
      "Test findProcessByPid() with non-running process id",
      function() {
        jqUnit.assertNull (
          "Search negative process id value", processReporter.findProcessByPid (-1)
        );
    });

    jqUnit.test (
        "Test findProcessByPid() against nodejs's own process object.",
        function() {
          var nodeProcInfo = processReporter.findProcessByPid (process.pid);
          jqUnit.assertEquals ("Node process 'name'",
                               process.title, nodeProcInfo.command);

          // Redundant?  This is how it was found.
          jqUnit.assertEquals ("Node process 'pid'",
                               process.pid, nodeProcInfo.pid);

          jqUnit.assertEquals ("Node process 'uid'",
                               process.getuid(), nodeProcInfo.uid);

          jqUnit.assertEquals ("Node process 'gid'",
                               process.getgid(), nodeProcInfo.gid);

          jqUnit.assertEquals ("Node process 'argv' length'",
                               process.argv.length, nodeProcInfo.argv.length);

          jqUnit.assertEquals ("Node process status",
                               "Running", nodeProcInfo.state);

          // Loop to compare nodejs argument vector against the one found by
          // by procTests.getProcesses().  Note that the linux's libgtop
          // returns a path relative to the current directory for argv[1],
          // whereas node reports the full path.  Compare using Path.resolve().
          for (var i = 0; i < process.argv.length; i++) {
            var processArg = process.argv[i];
            var nodeProcInfoArg = nodeProcInfo.argv[i];
            if (i === 1) {
              processArg = path.resolve (processArg);
              nodeProcInfoArg = path.resolve (nodeProcInfoArg);
            }
            jqUnit.assertEquals ("Node process 'argv[" + i + "]'",
                                 processArg, nodeProcInfoArg);
          }
    });

    jqUnit.test (
      "Test findProcessesByCmd()/findFirstProcessByCmd() with nodejs itself",
      function() {
        var nodeProcInfos = processReporter.findProcessesByCommand ("node");
        jqUnit.assertNotEquals (
          "Getting all 'node' processes", 0, nodeProcInfos.length
        );
        nodeProcInfos.forEach (function (aProcInfo) {
          jqUnit.assertEquals (
            "Node commmand name", "node", aProcInfo.command
          );
        });
        var procInfo = processReporter.findFirstProcessByCommand ("node");
        jqUnit.assertNotNull ("Looking for first 'node' processes", procInfo);
        jqUnit.assertEquals ("Node commmand name", "node", procInfo.command);
    });

    jqUnit.test (
      "Test initProcInfoNotRunning()",
      function() {
        var notRunning = processReporter.initProcInfoNotRunning ("grep");
        jqUnit.assertEquals ("Command name", notRunning.command, "grep");
        jqUnit.assertEquals ("Negative process id", notRunning.pid, -1);
        jqUnit.assertEquals (
          "'NoSuchProcess' state", notRunning.state, "NoSuchProcess"
        );
        jqUnit.assertNull (
          "Search negative process id value",
          processReporter.findProcessByPid (notRunning.pid)
        );
    });

    jqUnit.test (
      "Test isRunning() with nodejs itself, and nonexistent process",
      function() {
        var procInfo = processReporter.findProcessByPid (process.pid);
        jqUnit.assertNotNull ("Searching for 'node' process", procInfo);
        jqUnit.assertTrue (
          "Check nodejs is running", processReporter.isRunning (procInfo.state)
        );
        procInfo = processReporter.initProcInfoNotRunning ("grep");
        jqUnit.assertFalse (
          "Check nonexistent process running", processReporter.isRunning (procInfo)
        );
    });

    jqUnit.test (
      "Test updateProcInfo() against non-changing process",
      function() {
        var procInfo = processReporter.findProcessByPid (process.pid);
        jqUnit.assertNotNull ("Looking for 'node' processes", procInfo);
        var newProcInfo = processReporter.updateProcInfo (procInfo);
        jqUnit.assertDeepEq (
          "Check change in process info", procInfo, newProcInfo
        );
    });

    jqUnit.test (
      "Test updateProcInfo() against changing process",
      function() {
        var grep = spawn ("grep", ["ssh"]);
        var grepInfo = processReporter.findProcessByPid (grep.pid);
        jqUnit.assertNotNull ("Search 'grep' process", grepInfo);
        jqUnit.assertTrue ("Stop grep", grep.kill ("SIGHUP"));
        var newGrepInfo = processReporter.updateProcInfo (grepInfo);
        jqUnit.assertNotEquals (
          "Update process state", newGrepInfo.state, grepInfo.state
        );
    });

    jqUnit.test (
      "Test hasStateChanged()",
      function() {
        jqUnit.assertFalse (
          "Check null monitor", processReporter.hasStateChanged (null)
        );
        var catMonitor = processReporter.initMonitor (null);
        jqUnit.assertFalse (
          "Check null process", processReporter.hasStateChanged (catMonitor)
        );
        var catProcInfo = processReporter.initProcInfoNotRunning ("cat");
        catMonitor = processReporter.initMonitor (catProcInfo);
        var stateChanged = processReporter.hasStateChanged (catMonitor);
        jqUnit.assertFalse ("Check non-running process", stateChanged);

        var cat = spawn ("cat");
        catMonitor = processReporter.initMonitor (catProcInfo);
        stateChanged = processReporter.hasStateChanged (catMonitor);
        jqUnit.assertTrue ("Check running process", stateChanged);

        // Get the running process info, kill cat, and check again.
        catProcInfo = processReporter.findProcessByPid (cat.pid);
        catMonitor = processReporter.initMonitor (catProcInfo);
        cat.kill ("SIGHUP");
        stateChanged = processReporter.hasStateChanged (catMonitor);
        jqUnit.assertTrue ("Check stopped process", stateChanged);
    });

    jqUnit.test (
      "Test hasSwitchedRunState()",
      function() {
        jqUnit.assertFalse (
          "Check null monitor", processReporter.hasSwitchedRunState (null)
        );
        var grepProcMonitor = processReporter.initMonitor (null);
        jqUnit.assertFalse (
          "Check null process", processReporter.hasSwitchedRunState (grepProcMonitor)
        );
        var grep = spawn ("grep", ["ssh"]);
        var grepProcInfo = processReporter.findProcessByPid (grep.pid);
        grepProcMonitor = processReporter.initMonitor (grepProcInfo);
        var switched = processReporter.hasSwitchedRunState (grepProcMonitor);
        jqUnit.assertFalse ("Check running process", switched);
        jqUnit.assertEquals (
          "Process state change",
          grepProcInfo.state, grepProcMonitor.newProcInfo.state
        );
        // Kill grep, and check again.
        grep.kill ("SIGHUP");
        switched = processReporter.hasSwitchedRunState (grepProcMonitor);
        jqUnit.assertTrue ("Check stopped process", switched);
        jqUnit.assertNotEquals (
          "Process state change",
          grepProcInfo.state, grepProcMonitor.newProcInfo.state
        );
    });

    jqUnit.test (
      "Test findSolutionsByCommands()",
        function() {
          // Node is running. Add a running cat process. No such command as why.
          var cat = spawn ("cat");
          var solutions = ["node", "cat", "why"];
          var procInfos = processReporter.findSolutionsByCommands (solutions);
          jqUnit.assertTrue ("Node and cat processes", procInfos.length >= 2);
          procInfos.forEach (function (item) {
            var isNode = item.command === "node";
            var isCat = item.command === "cat";
            jqUnit.assertTrue ("Process name node nor cat", isNode || isCat);
          });
          cat.kill ("SIGHUP");
    });

    jqUnit.test (
      "Test findSolutionsByPids()",
        function() {
          // Node is running. Add a running cat process.
          var cat = spawn ("cat");
          var pids = [process.pid, cat.pid];
          var procInfos = processReporter.findSolutionsByPids (pids);
          jqUnit.assertEquals ("Node and cat processes", 2, procInfos.length);
          procInfos.forEach (function (item) {
            var isNode = item.pid === process.pid;
            var isCat = item.pid === cat.pid;
            jqUnit.assertTrue ("Process pid node nor cat", isNode || isCat);
          });
          cat.kill ("SIGHUP");
    });

    // Test real life scenario:  Use the GPII's gsettings bridge to launch
    // and shut down orca, and track the changes in state.
    jqUnit.test (
      "Test gpii.processReporter against launching orca.",
      function() {
        var orcaProcInfo = processReporter.findFirstProcessByCommand ("orca");
        var wasRunning = (orcaProcInfo !== null);
        // Start orca -- does nothing if orca is already running.
        nodeGSettings.set_gsetting (
          "org.gnome.desktop.a11y.applications","screen-reader-enabled", true 
        );
        // Give orca some time to start and initialize itself.  Then look
        // for the 'orca' process.
        procTests.wait5sec();
        orcaProcInfo = processReporter.findFirstProcessByCommand ("orca");
        jqUnit.assertNotNull ("Start Orca", orcaProcInfo);

        // Quit orca, giving it some time to quit itself.  Then look for the
        // process whose id matches the formerly running 'orca' process.
        nodeGSettings.set_gsetting (
          "org.gnome.desktop.a11y.applications", "screen-reader-enabled", false
        );
        procTests.wait5sec();
        if (orcaProcInfo !== null) {
          var orcaProcNewState = processReporter.findProcessByPid (orcaProcInfo.pid);
          jqUnit.assertNull ("Stop Orca", orcaProcNewState);
          var orcaMonitor = processReporter.initMonitor (orcaProcInfo);
          processReporter.hasStateChanged (orcaMonitor);
         jqUnit.assertEquals (
            "Orca process changed state", "NoSuchProcess",
            orcaMonitor.newProcInfo.state
          );
        }
        // Clean up.
        if (wasRunning) {
          nodeGSettings.set_gsetting (
              "org.gnome.desktop.a11y.applications",
              "screen-reader-enabled", true
          );
        }
    });

}());

