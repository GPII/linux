/**
 * GPII Process Reporter Tests
 *
 * Copyright 2015 Inclusive Design Research Centre, OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/gpii/universal/LICENSE.txt
 */
"use strict";

var fluid = require("universal"),
    jqUnit = fluid.require("node-jqunit");

require("processReporter");

var gpii = fluid.registerNamespace("gpii");
var processReporter = fluid.registerNamespace("gpii.processReporter");

jqUnit.module("GPII Linux ProcessReporter Module");

jqUnit.test("Running tests for Linux/GNOME Process Reporter", function () {
    jqUnit.expect(6);

    // Check that the bridge is loaded and required methods are available
    //
    var methods = ["find", "checkSetting"];
    for (var method in methods) {
        jqUnit.assertTrue("Checking availability of method '" + method + "'",
                          (methods[method] in processReporter));
    }
    // This is running inside 'node' itself, so the uid matches.
    jqUnit.assertTrue("Checking run-status of process 'node'",
                       gpii.processReporter.find("node"));

    // Unlikely there is ever a process named "T6y7u8i9C".
    jqUnit.assertFalse("Checking run-status of process 'T6y7u8i9'",
                        gpii.processReporter.find("T6y7u8i9C"));

    // There is likely a 'gdm' process, but its uid is not us.
    jqUnit.assertFalse("Checking run-status of un-owned 'gdm' process",
                        gpii.processReporter.find("gdm"));

    // Unknown what the status of a given setting is, but checkSetting() should
    // always return a boolean value.
    jqUnit.assertEquals("Checking retrieval of a setting",
                         typeof true,
                         typeof gpii.processReporter.checkSetting(
                            "org.gnome.desktop.a11y.applications",
                            "screen-magnifier-enabled"
                        ));
});
