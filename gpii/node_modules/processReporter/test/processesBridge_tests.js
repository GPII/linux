/*!
GPII Node.js Processes Bridge Unit Tests

Copyright 2014 Inclusive Design Research Centre, OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/*global require*/

"use strict";

var path = require("path"),
    spawn = require("child_process").spawn,
    fluid = require("universal"),
    jqUnit = fluid.require("node-jqunit");

require("../processesBridge.js");
var processesBridge = fluid.registerNamespace("gpii.processes");
var procTests = fluid.registerNamespace("gpii.tests.processes");

procTests.waitMsec = function (msec) {
    var t0 = Date.now();
    var longEnough = false;
    while (!longEnough) {
        longEnough = ((Date.now() - t0) > msec);
    }
};

jqUnit.module("Processes Bridge node add-on module");
jqUnit.test(
    "Test getProceses()/findProcessByPid() with the nodejs process itself",
    function () {
        var procInfos = processesBridge["native"].getProcessList();
        jqUnit.assertNotEquals(
            "Listing all processes", 0, procInfos.length
        );

        // Check for the presence of this nodejs processs itself -- it must
        // be in the process list since this code is running inside that
        // process.
        var nodeProc = processesBridge.findProcessByPid(process.pid, procInfos);
        jqUnit.assertNotNull("Searching for 'node' process", nodeProc);
    }
);

jqUnit.test(
    "Test findProcessByPid() with non-running process id",
    function () {
        jqUnit.assertNull(
        "Search negative process id value", processesBridge.findProcessByPid(-1)
        );
    }
);

jqUnit.test(
    "Test findProcessByPid() against nodejs's own process object.",
    function () {
        var nodeProcInfo = processesBridge.findProcessByPid(process.pid);
        jqUnit.assertEquals("Node process 'name'",
            process.title, nodeProcInfo.command);

        // Redundant?  This is how it was found.
        jqUnit.assertEquals("Node process 'pid'",
            process.pid, nodeProcInfo.pid);

        jqUnit.assertEquals("Node process 'uid'",
            process.getuid(), nodeProcInfo.uid);

        jqUnit.assertEquals("Node process 'gid'",
            process.getgid(), nodeProcInfo.gid);

        jqUnit.assertEquals("Node process 'argv' length'",
            process.argv.length, nodeProcInfo.argv.length);

        jqUnit.assertEquals("Node process status",
            "Running", nodeProcInfo.state);

        // The "fullPath" property is added by the process node add-on.
        // It should match the full path to process.title.
        jqUnit.assertEquals("Node process fullPath",
            path.resolve(process.title),
            path.resolve(nodeProcInfo.fullPath)
        );

        // The order of process.argv and nodeProcInfo.argv is not
        // necessarily the same, nor are the number of arguments the same.
        // Only the first argument of vectors match as the name of the
        // process (here "node").  Hence, can only test that the first
        // argument is the command in both cases.
        jqUnit.assertEquals("Node process argv[0]",
            path.basename(process.argv[0]),
            path.basename(nodeProcInfo.argv[0])
        );
    }
);

jqUnit.test(
    "Test findProcessesByCmd()/findFirstProcessByCmd() with nodejs itself",
    function () {
        var nodeProcInfos = processesBridge.findProcessesByCommand("node");
        jqUnit.assertNotEquals(
            "Getting all 'node' processes", 0, nodeProcInfos.length
        );
        nodeProcInfos.forEach(function (aProcInfo) {
            jqUnit.assertEquals(
                "Node commmand name", "node", aProcInfo.command
            );
        });
        var procInfo = processesBridge.findFirstProcessByCommand("node");
        jqUnit.assertNotNull(
            "Looking for first 'node' processes", procInfo);
        jqUnit.assertEquals("Node commmand name", "node", procInfo.command);
    }
);

jqUnit.test(
    "Test initProcInfoNotRunning()",
    function () {
        var notRunning = processesBridge.initProcInfoNotRunning("grep");
        jqUnit.assertEquals("Command name", notRunning.command, "grep");
        jqUnit.assertEquals("Negative process id", notRunning.pid, -1);
        jqUnit.assertEquals(
            "'NoSuchProcess' state", notRunning.state, "NoSuchProcess"
        );
        jqUnit.assertNull(
            "Search negative process id value",
        processesBridge.findProcessByPid(notRunning.pid)
        );
    }
);

jqUnit.test(
    "Test isRunning() with nodejs itself, and nonexistent process",
    function () {
        var procInfo = processesBridge.findProcessByPid(process.pid);
        jqUnit.assertNotNull("Searching for 'node' process", procInfo);
        jqUnit.assertTrue(
            "Check nodejs is running",
            processesBridge.isRunning(procInfo.state)
        );
        procInfo = processesBridge.initProcInfoNotRunning("grep");
        jqUnit.assertFalse(
            "Check nonexistent process running",
            processesBridge.isRunning(procInfo)
        );
    }
);

jqUnit.test(
    "Test updateProcInfo() against non-changing process",
    function () {
        var procInfo = processesBridge.findProcessByPid(process.pid);
        jqUnit.assertNotNull("Looking for 'node' processes", procInfo);
        var newProcInfo = processesBridge.updateProcInfo(procInfo);
        jqUnit.assertDeepEq(
            "Check change in process info", procInfo, newProcInfo
        );
    }
);

jqUnit.test(
    "Test updateProcInfo() against changing process",
    function () {
        var grep = spawn("grep", ["ssh"]);
        var grepInfo = processesBridge.findProcessByPid(grep.pid);
        jqUnit.assertNotNull("Search 'grep' process", grepInfo);
        jqUnit.assertTrue("Stop grep", grep.kill("SIGHUP"));
        var newGrepInfo = processesBridge.updateProcInfo(grepInfo);
        jqUnit.assertNotEquals(
            "Update process state", newGrepInfo.state, grepInfo.state
        );
    }
);

jqUnit.test(
    "Test hasStateChanged()",
    function () {
        jqUnit.assertFalse(
            "Check null monitor", processesBridge.hasStateChanged(null)
        );
        var catMonitor = processesBridge.initMonitor(null);
        jqUnit.assertFalse(
            "Check null process",
            processesBridge.hasStateChanged(catMonitor)
        );
        var catProcInfo = processesBridge.initProcInfoNotRunning("cat");
        catMonitor = processesBridge.initMonitor(catProcInfo);
        var stateChanged = processesBridge.hasStateChanged(catMonitor);
        jqUnit.assertFalse("Check non-running process", stateChanged);

        var cat = spawn("cat");
        catMonitor = processesBridge.initMonitor(catProcInfo);
        stateChanged = processesBridge.hasStateChanged(catMonitor);
        jqUnit.assertTrue("Check running process", stateChanged);

        // Get the running process info, kill cat, and check again.
        catProcInfo = processesBridge.findProcessByPid(cat.pid);
        catMonitor = processesBridge.initMonitor(catProcInfo);
        cat.kill("SIGHUP");
        stateChanged = processesBridge.hasStateChanged(catMonitor);
        jqUnit.assertTrue("Check stopped process", stateChanged);
    }
);

jqUnit.test(
    "Test hasSwitchedRunState()",
    function () {
        jqUnit.assertFalse(
            "Check null monitor", processesBridge.hasSwitchedRunState(null)
        );
        var grepProcMonitor = processesBridge.initMonitor(null);
        jqUnit.assertFalse(
            "Check null process",
            processesBridge.hasSwitchedRunState(grepProcMonitor)
        );
        // Spawn a "grep" process, and give it a little time to start up.
        var grep = spawn("grep", ["ssh"]);
        procTests.waitMsec(500);

        var grepProcInfo = processesBridge.findProcessByPid(grep.pid);
        grepProcMonitor = processesBridge.initMonitor(grepProcInfo);
        var switched = processesBridge.hasSwitchedRunState(grepProcMonitor);
        jqUnit.assertFalse("Check running process", switched);
        jqUnit.assertEquals(
            "Process state change",
            grepProcInfo.state, grepProcMonitor.newProcInfo.state
        );
        // Kill grep, and check again.
        grep.kill("SIGHUP");
        switched = processesBridge.hasSwitchedRunState(grepProcMonitor);
        jqUnit.assertTrue("Check stopped process", switched);
        jqUnit.assertNotEquals(
            "Process state change",
            grepProcInfo.state, grepProcMonitor.newProcInfo.state
        );
    }
);

jqUnit.test(
    "Test findSolutionsByCommands()",
    function () {
        // Node is running. Add a running cat. No such command as T6y7u8i9.
        var cat = spawn("cat");
        var solutions = ["node", "cat", "T6y7u8i9"];
        var procInfos = processesBridge.findSolutionsByCommands(solutions);
        jqUnit.assertTrue("Node and cat processes", procInfos.length >= 2);
        procInfos.forEach(function (item) {
            var isNode = item.command === "node";
            var isCat = item.command === "cat";
            jqUnit.assertTrue("Process name node nor cat", isNode || isCat);
        });
        cat.kill("SIGHUP");
    }
);

jqUnit.test(
    "Test findSolutionsByPids()",
    function () {
        // Node is running. Add a running cat process.
        var cat = spawn("cat");
        var pids = [process.pid, cat.pid];
        var procInfos = processesBridge.findSolutionsByPids(pids);
        jqUnit.assertEquals("Node and cat processes", 2, procInfos.length);
        procInfos.forEach(function (item) {
            var isNode = item.pid === process.pid;
            var isCat = item.pid === cat.pid;
            jqUnit.assertTrue("Process pid node nor cat", isNode || isCat);
        });
        cat.kill("SIGHUP");
    }
);

