/*!
GPII Node.js Processes Bridge

Copyright 2014 Inclusive Design Research Centre, OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/*global require*/

var fluid = require ("universal"),
    jqUnit = fluid.require ("jqUnit"),
    processes = require ("./build/Release/nodeprocesses.node");

(function() {
    "use strict";

    var procTests = fluid.registerNamespace ("gpii.tests.processes");

    // Return the process info object that matches the given command string.
    procTests.matchProcByCommand = function (commandName, procArray) {
        return fluid.find (procArray, function (procInfo) {
           if (procInfo.command === commandName) {
              return procInfo;
           }
        }, null);
    };

    jqUnit.module ("Processes Bridge node add-on module");

    jqUnit.test (
        "Test getProceses() with 'node' (has to be a running process)",
        function() {
          var procInfos = processes.getProcesses();
          jqUnit.assertNotEquals (
              "Getting all processes", 0, procInfos.length
          );
          // Check for the presence of "node" processs itself -- it must be in
          // the process list since this code is running inside the node
          // process.
          var found = procTests.matchProcByCommand ("node", procInfos);
          jqUnit.assertTrue ("Searching for 'node' process", found);
    });

    jqUnit.test (
        "Test getProceses() against nodejs's own global process object.",
        function() {
          var procInfos = processes.getProcesses();
          var nodeProcInfo = procTests.matchProcByCommand ("node", procInfos);
          jqUnit.assertEquals ("Node process 'pid'",
                               process.pid, nodeProcInfo.pid);

          jqUnit.assertEquals ("Node process 'uid'",
                               process.getuid(), nodeProcInfo.uid);

          jqUnit.assertEquals ("Node process 'gid'",
                               process.getgid(), nodeProcInfo.gid);

          jqUnit.assertEquals ("Node process 'name'",
                               process.title, nodeProcInfo.command);

          jqUnit.assertEquals ("Node process 'argv' length'",
                               process.argv.length, nodeProcInfo.argv.length);

          jqUnit.assertEquals ("Node process status",
                               "Running", nodeProcInfo.state);

          // Loop to compare nodejs argument vector against the one found by
          // by procTests.getProcesses().
          for (var i = 0; i < process.argv.length; i++) {
            jqUnit.assertEquals ("Node process 'argv[" + i + "]'",
                                 process.argv[i], nodeProcInfo.argv[i]);
          }
    });
}());