/*!
GPII Node.js Processes Bridge

Copyright 2014 Inclusive Design Research Centre, OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/*global require*/

var fluid = require ("universal"),
    gpii = fluid.registerNamespace ("gpii"),
    jqUnit = fluid.require ("jqUnit"),
    processes = require ("./build/Release/nodeprocesses.node");

    // TODO:  Must be a better way to get node gsettings add-on.
    // something like 'fluid.require ("gsettingsBridge", require);'
    var nodeGSettings = require("../../gsettingsBridge//nodegsettings/build/Release/nodegsettings.node");

(function() {
    "use strict";

    var procTests = fluid.registerNamespace ("gpii.tests.processes");

    // Return the process info object that matches the given command string.
    // Note that it can return "null" meaning there is no such process running.
    procTests.matchProcByCommand = function (commandName, procArray) {
      if (!procArray) {
        procArray = processes.getProcesses();
      }
      return fluid.find (procArray, function (procInfo) {
         if (procInfo.command === commandName) {
            return procInfo;
         }
      }, null);
    };

    // Return the process info object that matches the given process id.
    // Note that it can return "null" meaning there is no such process running.
    procTests.matchProcByPid = function (pid, procArray) {
      if (!procArray) {
        procArray = processes.getProcesses();
      }
      return fluid.find (procArray, function (procInfo) {
         if (procInfo.pid === pid) {
            return procInfo;
         }
      }, null);
    };

    // TODO: (JS, 16-Sep-2014) Consider creating a standalone "process" object
    // (fluid component ?) to encapsulate these procTests methods.

    // Determine if the state of the given process has changed.  Return truthy:
    // - if the state has not changed, return false.
    // - if the state has changed, return the new state.  Special case:  a
    //   process that has been killed isn't in the list; return "NoSuchProcess".
    procTests.hasStateChanged = function (procInfo) {
      if (!procInfo) {
        console.log ("hasStateChanged() called on null procinfo");
        return false;    // ? nothing sought === nothing changed.
      }
      console.log ("hasStateChanged() called on " + procInfo.command + ", given state is " + procInfo.state);
      var procArray = processes.getProcesses();
      var theProc = procTests.matchProcByPid (procInfo.pid, procArray);

      // Case:  process not in the current list, implies state changed. but...
      if (theProc === null) {
          if (procInfo.state === "NoSuchProcess") {
              console.log ("CASE 1A");
              return false;
          }
          else {
              console.log ("CASE 1B");
              return "NoSuchProcess";
          }
      }

      // Case:  Process is (still) in the list and has the same state.
      else if (theProc.state === procInfo.state) {
        console.log ("CASE 2");
        return false;
      }

      // Case:  Process is (still) in the list, but has a different state.
      else {
        console.log ("CASE 3");
        return theProc.state;
      }
    }

    // Delay 10 seconds.
    procTests.wait10sec = function() {
      var t0 = Date.now();
      var longEnough = false;
      while (!longEnough) {
        longEnough = ((Date.now() - t0) > 10000);
      }
    };

    jqUnit.module ("Processes Bridge node add-on module");

    jqUnit.test (
        "Test getProceses() with 'node' (the nodejs process itself)",
        function() {
          var procInfos = processes.getProcesses();
          jqUnit.assertNotEquals (
              "Getting all processes", 0, procInfos.length
          );

          // Check for the presence of this nodejs processs itself -- it must
          // be in the process list since this code is running inside that
          // process.
          var nodeProc = procTests.matchProcByPid (process.pid, procInfos);
          jqUnit.assertNotNull ("Searching for 'node' process", nodeProc);
    });

    jqUnit.test (
        "Test getProceses() against nodejs's own process object.",
        function() {
          var procInfos = processes.getProcesses();
          var nodeProcInfo = procTests.matchProcByPid (process.pid, procInfos);
          jqUnit.assertEquals ("Node process 'name'",
                               process.title, nodeProcInfo.command);

          // TODO:  Mildly redundant?  This is how it was found.
          jqUnit.assertEquals ("Node process 'pid'",
                               process.pid, nodeProcInfo.pid);

          jqUnit.assertEquals ("Node process 'uid'",
                               process.getuid(), nodeProcInfo.uid);

          jqUnit.assertEquals ("Node process 'gid'",
                               process.getgid(), nodeProcInfo.gid);

          jqUnit.assertEquals ("Node process 'argv' length'",
                               process.argv.length, nodeProcInfo.argv.length);

          jqUnit.assertEquals ("Node process status",
                               "Running", nodeProcInfo.state);

          // Loop to compare nodejs argument vector against the one found by
          // by procTests.getProcesses().
          for (var i = 0; i < process.argv.length; i++) {
            if (i != 1) {
            jqUnit.assertEquals ("Node process 'argv[" + i + "]'",
                                 process.argv[i], nodeProcInfo.argv[i]);
            }
          }
    });

    // TODO:  (JS, 16-Sep-2014) Not really a test, but the beginnings of how
    // to actually use a "process" object to monitor the state of the
    // processes-of-interest.
    // TODO:  This test assumes orca is running at the start.  Need to launch
    // it here first as necessary.
    jqUnit.test (
        "Test getProceses() against launching orca.",
        function() {
          var wasRunning = true;
          var orcaProc = procTests.matchProcByCommand ("orca");
          if (orcaProc == null) {
            wasRunning = false;
            var status = nodeGSettings.set_gsetting (
                            "org.gnome.desktop.a11y.applications",
                            "screen-reader-enabled", true);

            // Give orca some time to start an initialize itself.  Then look for
            // the 'orca' process.
            procTests.wait10sec();
              orcaProc = procTests.matchProcByCommand ("orca");
          }
          jqUnit.assertNotNull ("Orca is running", orcaProc);

          // Shutting orca down will change the state.
          // Need to wait, say one second, for orca to shut down.
          status = nodeGSettings.set_gsetting (
                    "org.gnome.desktop.a11y.applications",
                    "screen-reader-enabled", false);

          // Give orca some time to shut itself down.  Then look for
          // the process whose id matches the running 'orca' process from
          // above.
          procTests.wait10sec();
          var orcaProcNewState = procTests.matchProcByPid (orcaProc.id);
          jqUnit.assertNull ("Orca no longer running", orcaProcNewState);

          var newState = procTests.hasStateChanged (orcaProc);
          jqUnit.assertEquals ("Orca process changed state", "NoSuchProcess", newState);

          // Clean up.
          if (wasRunning)
            nodeGSettings.set_gsetting ("org.gnome.desktop.a11y.applications",
                                        "screen-reader-enabled", true);
    });

}());
