/*!
GPII Processes Bridge -- gpii.processes.

Copyright 2014 Inclusive Design Research Centre, OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/*global require */

(function() {
    "use strict";

    var fluid = require ("universal");
    var gpii = fluid.registerNamespace ("gpii");
    var nodeProcesses = require ("./nodeprocesses/build/Release/nodeprocesses.node");

    gpii.processes = fluid.registerNamespace ("gpii.processes");

    // Return a list of processes -- a snapshot of the current processes.
    gpii.processes.getProcesses = function() {
      return nodeProcesses.getProcesses();
    };

    // Return THE process info object that matches the given process id.
    // Note that it can return "null" meaning there is no such process.
    gpii.processes.findProcessByPid = function (pid, procArray) {
      if (!procArray) {
        procArray = gpii.processes.getProcesses();
      }
      return fluid.find (procArray, function (procInfo) {
         if (procInfo.pid === pid) {
            return procInfo;
         }
      }, null);
    };

    // Return an an array of process information objects that match the given
    // command name string.  Note that it can return an empty array, meaning
    // there is no such process.
    gpii.processes.findProcessesByCommand = function (commandName, procArray) {
      if (!procArray) {
        procArray = gpii.processes.getProcesses();
      }
      return fluid.accumulate (procArray, function (aProcInfo, matchingProcs) {
         if (aProcInfo.command === commandName) {
            matchingProcs.push (aProcInfo);
         }
         return matchingProcs;
      }, []);
    };

    // Determine if the state of the given process has changed.  Return truthy:
    // - if the state has not changed, return false.
    // - if the state has changed, return the new state.  Special case:  a
    //   process that has been killed isn't in the processes list; return
    //   "NoSuchProcess".
    gpii.processes.hasStateChanged = function (procInfo) {
      if (!procInfo) {
        console.log ("hasStateChanged() called on null procinfo");
        return false;    // nothing sought === nothing changed.
      }
      console.log ("hasStateChanged() called on " + procInfo.command + ", given state is " + procInfo.state);
      var procArray = gpii.processes.getProcesses();
      
      var theProc = null;
      if (procInfo.state === "NoSuchProcess") {
        var running = gpii.processes.findProcessesByCommand (procInfo.command);
        if (running.length > 0) {
          theProc = running[0];
        }
      }
      else {
        theProc = gpii.processes.findProcessByPid (procInfo.pid, procArray);
      }

      // Case:  process not in the current list ...
      // - if procInfo.state is anything but "NoSuchProcess", then new state is
      //   no longer running (it quit).
      // - if procInfo.state is "NoSuchProcess", then the process has not
      //   started -- no change in state.
      if (theProc === null) {
        if (procInfo.state === "NoSuchProcess") {
          return false;
        }
        else {
          return "NoSuchProcess";
        }
      }

      // Case:  Process is (still) in the list and has the same state.
      else if (theProc.state === procInfo.state) {
        return false;
      }

      else {
        return theProc.state;
      }
    };

    // Renew the information on a proces, or create a new one.  Returns null if
    // no such process is running.
    gpii.processes.refreshProcInfo = function (pid) {
      var procArray = gpii.processes.getProcesses();
      return gpii.processes.findProcessByPid (pid, procArray);
    };

    // Create information on a non-running process, to use to detect when the
    // process starts.
    gpii.processes.initNotRunning = function (command) {
      var process = {};
      process.command = command;
      process.pid = -1;
      process.ppid = -1;
      process.uid = -1;
      process.gid = -1;
      process.fullPath = "";
      process.argv = "";
      process.state = "NoSuchProcess";
      return process;
    };

    // Create a monitor object for passing to a setInterval() to periodically
    // check for chanages in the status of a process.
    gpii.processes.initMonitor = function() {
      var monitor = {};
      monitor.intervalID = -1;
      monitor.stateChanged = false;
      monitor.newState = false;

      return monitor;
    };

    // Callback to pass to setInterval() to periodically check the state of a
    // process.
    gpii.processes.monitorChanged = function (procInfo, monitor) {
      var newState = gpii.processes.hasStateChanged (procInfo);
      console.log ("gpii.processes.monitorChanged():  <newState> is " + newState);
      if (newState) {
        monitor.stateChanged = true;
        monitor.newState = newState;
        console.log ("NEW STATE!  ==> " + monitor.newState);

        clearInterval (monitor.intervalID); //  Here?
      }
    };

    return gpii.processes;
}());