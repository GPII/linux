/*!
GPII Processes Bridge -- gpii.processes.

Copyright 2014 Inclusive Design Research Centre, OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/*global require */

(function() {
    "use strict";

    var fluid = require ("universal");
    var gpii = fluid.registerNamespace ("gpii");
    var nodeProcesses = require ("./nodeprocesses/build/Release/nodeprocesses.node");

    gpii.processes = fluid.registerNamespace ("gpii.processes");
    var startStopNotify = fluid.makeEventFirer();

    // Return a list of processes -- a snapshot of the current processes.
    gpii.processes.getProcesses = function() {
      return nodeProcesses.getProcesses();
    };

    // Return THE process info object that matches the given process id.
    // Note that it can return "null" meaning there is no such process.
    gpii.processes.findProcessByPid = function (pid, procArray) {
      if (!procArray) {
        procArray = gpii.processes.getProcesses();
      }
      return fluid.find (procArray, function (procInfo) {
         if (procInfo.pid === pid) {
            return procInfo;
         }
      }, null);
    };

    // Return an array of process information objects that match the given
    // command name string.  Note that it can return an empty array, meaning
    // there is no such process.
    gpii.processes.findProcessesByCommand = function (commandName, procArray) {
      if (!procArray) {
        procArray = gpii.processes.getProcesses();
      }
      return fluid.accumulate (procArray, function (aProcInfo, matchingProcs) {
         if (aProcInfo.command === commandName) {
            matchingProcs.push (aProcInfo);
         }
         return matchingProcs;
      }, []);
    };

    // Return the first process of an array of processes all with the same
    // command name string.  If there are no matching processes, return null.
    gpii.processes.findFirstProcessByCommand = 
    function (commandName, procArray) {
      var commands = 
        gpii.processes.findProcessesByCommand (commandName, procArray);
      if (commands.length > 0) {
        return commands[0];
      }
      else {
        return null;
      }
    };

    // Determine if the state of the given process has changed.  Return truthy:
    // - if the state has not changed, return false.
    // - if the state has changed, return the new state.  Special case:  a
    //   process that has quit isn't in the processes list; return
    //   "NoSuchProcess".
    gpii.processes.hasStateChanged = function (procInfo) {
      if (!procInfo) {
        return false;    // nothing sought === nothing changed.
      }
      var procArray = gpii.processes.getProcesses();

      var theProc = null;
      if (procInfo.state === "NoSuchProcess") {
        var running = gpii.processes.findProcessesByCommand (procInfo.command);
        if (running.length > 0) {
          theProc = running[0];
        }
      }
      else {
        theProc = gpii.processes.findProcessByPid (procInfo.pid, procArray);
      }
      // Case:  process not in the current list ...
      // - if procInfo.state is anything but "NoSuchProcess", then new state is
      //   no longer running (it quit).
      // - if procInfo.state is "NoSuchProcess", then the process has not
      //   started -- no change in state.
      if (theProc === null) {
        if (procInfo.state === "NoSuchProcess") {
          return false;
        }
        else {
          return "NoSuchProcess";
        }
      }
      // Case:  Process is (still) in the list and has the same state.
      else if (theProc.state === procInfo.state) {
        return false;
      }
      // Case:  Process is (still) in the list and has a new state.
      else {
        return theProc.state;
      }
    };

    // Utility function to conflate process state values into "Running"
    // (= true) vs. "Not Running" (= false).  Returns boolean.
    gpii.processes.isRunning = function (state) {
      var result;
      switch (state) {
        case "Running":
        case "Uninterruptible":
        case "Sleeping":
        case "Stopped":
          result = true;
          break;

        default:
        case "Zombie":
        case "NoSuchProcess":
          result = false;
          break;
      }
      return result;
    };

    // Determine if the state of the given process has changed from
    // "not running" to "running" OR from "running" to "not running".
    // Return boolean.
    gpii.processes.hasSwitchedRunState = function (monitor) {
      if (!monitor || !monitor.procInfo) {
        // nothing sought === nothing changed.
        return false;
      }
      monitor.newProcInfo = gpii.processes.updateProcInfo (monitor.procInfo);
      var wasRunning = gpii.processes.isRunning (monitor.procInfo.state);
      var isRunning =  gpii.processes.isRunning (monitor.newProcInfo.state);
      return (isRunning !== wasRunning);
    };

    // Renew the information on a process, or create a new "NoSuchProcces".
    // Returns a new procInfo structure.
    gpii.processes.updateProcInfo = function (procInfo) {
      var newProcInfo = null;
      if (procInfo.state === "NoSuchProcess") {
        newProcInfo = gpii.processes.findFirstProcessByCommand (procInfo.command);
      }
      else {
        newProcInfo = gpii.processes.findProcessByPid (procInfo.pid);
      }
      if (newProcInfo === null) {
        newProcInfo = gpii.processes.initProcInfoNotRunning (procInfo.command);
      }
      return newProcInfo;
    };

    // Create information on a non-running process, to use to detect when the
    // process starts.
    gpii.processes.initProcInfoNotRunning = function (command) {
      var process = {};
      process.command = command;
      process.pid = -1;
      process.ppid = -1;
      process.uid = -1;
      process.gid = -1;
      process.fullPath = "";
      process.argv = "";
      process.state = "NoSuchProcess";
      return process;
    };

    // Create a monitor object for passing to a function that periodically
    // checks for chanages in the state of a process.
    gpii.processes.initMonitor = function (procInfo) {
      var monitor = {};
      monitor.intervalID = -1;
      monitor.newState = false;
      monitor.procInfo = procInfo;
      monitor.newProcInfo = null;
      return monitor;
    };

    // Callback to pass to, e.g., setInterval() to periodically check the state
    // of a process.
    gpii.processes.monitorStateChange = function (monitor) {
      var newState = gpii.processes.hasStateChanged (monitor.procInfo);
      if (newState) {
        monitor.newState = newState;
      }
    };

    // Callback to pass to setInterval() to periodically check when the state
    // changes from "running" to "not running" and vice versa.
    gpii.processes.monitorRunStateChanged = function (monitor) {
      if (gpii.processes.hasSwitchedRunState (monitor)) {
        if (monitor.newProcInfo === null) {
          monitor.procInfo =
            gpii.processes.initProcInfoNotRunning (monitor.procInfo.command);
        }
        else {
          monitor.procInfo = monitor.newProcInfo;
        }
        monitor.newState = monitor.procInfo.state;
        startStopNotify.fire (monitor.procInfo);
      }
    };

    // ==============
    // Event handling
    // ==============

    // Provide a way for the outside world to pass in a handler for the
    // "switchedRunState", and to cancel.
    gpii.processes.trackRunState = function (procInfo, handler) {
      var monitor = gpii.processes.initMonitor (procInfo);
      startStopNotify.addListener (handler);
      monitor.intervalID = setInterval (function() {
        gpii.processes.monitorRunStateChanged (monitor);
      });
      return monitor.intervalID;
    };

    gpii.processes.stopTrackingRunState = function (handler, intervalID) {
      startStopNotify.removeListener (handler);
      clearInterval (intervalID);
    };

}());
