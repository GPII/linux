/*
 * GPII Xrandr Settings Handler Tests
 *
 * Copyright 2013 Emergya
 * Copyright 2016 OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/linux/blob/master/LICENSE.txt
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 */

"use strict";

var fluid = require("universal"),
    jqUnit = fluid.require("node-jqunit");

require("xrandr");
var gpii = fluid.registerNamespace("gpii");
var xrandr = fluid.registerNamespace("gpii.xrandr");
var xrandrTests = fluid.registerNamespace("gpii.xrandr.tests");

// Mock settings payload
xrandrTests.payload = {
    "org.freedesktop.xrandr": [{
        settings: {
            "screen-resolution": {"width": 800, "height": 600}
        }
    }]
};

xrandrTests.getImplTestData = {
    "screen-resolution": {
        get: "gpii.xrandr.tests.getScreenResolution",
    }
};

gpii.xrandr.tests.getScreenResolution = function () {
    var anXRandR = xrandr();
    return anXRandR.getScreenResolution();
};

var XRandR = xrandr();
jqUnit.module("GPII XRandR Module");

jqUnit.test("XRandR Bridge: Get connected display", function () {
    var connectedDisplay = XRandR.getConnectedDisplay();
    jqUnit.assertNotNull("Getting connected display", connectedDisplay);
    jqUnit.assertEquals("Connected display", "connected", connectedDisplay.status);
});

jqUnit.test("XRandR Bridge: Get screen resolution", function () {
    var screenResolution = XRandR.getScreenResolution();
    jqUnit.assertNotNull("Getting current screen resolution", screenResolution);
    jqUnit.assertNotEquals("Current screen width", 0, screenResolution.width);
    jqUnit.assertNotEquals("Current screen height", 0, screenResolution.height);
});

jqUnit.test("XRandR Bridge: Available screen resolutions", function () {
    var availableReesolutions = XRandR.getAvailableResolutions();
    jqUnit.assertNotNull("Available resoiultions array", availableReesolutions);
    jqUnit.assertNotEquals("Number of availableReesolutions",
                           0, availableReesolutions.length);
});

jqUnit.test("XRandR Bridge: All screen resolutions", function () {
    var current = XRandR.getScreenResolution();
    var available = XRandR.getAvailableResolutions();
    var all = XRandR.getAllScreenResolutions();
    jqUnit.assertDeepEq("All screen resolutions contains current resolution",
                        current, all["current-resolution"]);
    jqUnit.assertDeepEq("All screen resolutions contains available resolution",
                        available, all["available-resolutions"]);
});

jqUnit.test("XRandR Bridge: Set screen resolution", function () {
    var currentRez = XRandR.getScreenResolution();
    var availableRez = XRandR.getAvailableResolutions();
    var newRez = fluid.copy(currentRez);
    if (availableRez.length > 1) {
        newRez = availableRez[1];
    }
    XRandR.setScreenResolution(newRez);
    var sctualRez = XRandR.getScreenResolution();
    jqUnit.assertDeepEq("Set to new resolution", newRez, sctualRez);

    XRandR.setScreenResolution(currentRez);
    var sctualRez = XRandR.getScreenResolution();
    jqUnit.assertDeepEq("Reset to original resolution", currentRez, sctualRez);
});

jqUnit.test("XRandR Bridge: getImpl()", function () {
    // Call without passing a settingsRequest.  The current screen resolution
    // is expected.
    var actualSettings = XRandR.getImpl();
    var screenResolutions = XRandR.getAllScreenResolutions();
    var expectedSettings = {};
    fluid.set(expectedSettings, "screen-resolution", screenResolutions);
    jqUnit.assertDeepEq("Return value of getImpl() with no input",
                        expectedSettings, actualSettings);

    // Call with a test settingsRequest.
    var actualSettings = XRandR.getImpl(xrandrTests.getImplTestData);
    jqUnit.assertDeepEq("Return value of getImpl() with an input",
                         expectedSettings, actualSettings);

});

jqUnit.test("XRandR Bridge: get() with mock settings payload", function () {
    var actual = XRandR.get(xrandrTests.payload);
    var screenResolutions = XRandR.getAllScreenResolutions();
    var resolutionsStruct = {};
    fluid.set(resolutionsStruct, "screen-resolution", screenResolutions);
    var expected = {
        "org.freedesktop.xrandr": [{
            "settings": resolutionsStruct
        }]
    };
    jqUnit.assertDeepEq("Return value of get", expected, actual);
});

jqUnit.test("XRandR Bridge: set() with mock settings payload", function () {
    var returnPayload = XRandR.set(xrandrTests.payload);
    jqUnit.assertDeepEq("The resolution is being setted well",
            returnPayload["org.freedesktop.xrandr"][0].settings["screen-resolution"].newValue,
            xrandrTests.payload["org.freedesktop.xrandr"][0].settings["screen-resolution"]);

    var newPayload = fluid.copy(xrandrTests.payload);
    newPayload["org.freedesktop.xrandr"][0].settings["screen-resolution"] =
        returnPayload["org.freedesktop.xrandr"][0].settings["screen-resolution"].oldValue;

    var lastPayload = XRandR.set(newPayload);

    jqUnit.assertDeepEq("The resolution is being restored well",
            returnPayload["org.freedesktop.xrandr"][0].settings["screen-resolution"].oldValue,
            lastPayload["org.freedesktop.xrandr"][0].settings["screen-resolution"].newValue);
});
