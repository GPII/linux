/*
 * GPII Node.js Xrandr Bridge
 *
 * Copyright 2013 Emergya
 * Copyright 2017 Inclusive Design Reserach Centre, OCAD University
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/linux/blob/master/LICENSE.txt
 *
 * The research leading to these results has received funding from the European Union's
 * Seventh Framework Programme (FP7/2007-2013)
 * under grant agreement no. 289016.
 */


"use strict";

var fluid = require("universal");
var gpii = fluid.registerNamespace("gpii");
var nodeXrandr = require("./nodexrandr/build/Release/nodexrandr.node");

fluid.registerNamespace("gpii.xrandr");

fluid.defaults("gpii.xrandr", {
    gradeNames: ["fluid.component"],
    invokers: {
        getConnectedDisplay: {
            funcName: "gpii.xrandr.getConnectedDisplay",
            args: []
        },
        getScreenResolution: {
            funcName: "gpii.xrandr.getScreenResolution",
            args: []
        },
        getAvailableResolutions: {
            funcName: "gpii.xrandr.getAvailableResolutions",
            args: ["{that}"]
        },
        getAllScreenResolutions: {
            funcName: "gpii.xrandr.getAllScreenResolutions",
            args: []
        },
        setScreenResolution: {
            funcName: "gpii.xrandr.setScreenResolution",
            args: ["{that}", "{arguments}.0"]
                             // { width, height }
        },
        getImpl: {
            funcName: "gpii.xrandr.getImpl",
            args: ["{arguments}.0"]
                   // settingsRequest payload
        },
        get: {
            funcName: "gpii.xrandr.get",
            args: ["{that}", "{arguments}.0"]
                             // array of settings
        },
        set: {
            funcName: "gpii.xrandr.set",
            args: ["{that}", "{arguments}.0"]
                             // array of settings
        }
    }
});

gpii.xrandr.getConnectedDisplay = function () {
    var displayInfo = nodeXrandr.getDisplays();
    return fluid.find_if(displayInfo, function (display) {
        return display.status === "connected";
    }, displayInfo[0]);
};

gpii.xrandr.getScreenResolution = function () {
    var connectedDisplay = gpii.xrandr.getConnectedDisplay();
    return {
        width: connectedDisplay.resolution.width,
        height: connectedDisplay.resolution.height
    };
};

gpii.xrandr.getAvailableResolutions = function (that) {
    var connectedDisplay = that.getConnectedDisplay();
    return connectedDisplay.available_resolutions;
};

gpii.xrandr.getAllScreenResolutions = function () {
    var xrandr = gpii.xrandr();
    var currentResolution = xrandr.getScreenResolution();
    var available = xrandr.getAvailableResolutions();
    return {
        "screen-resolution" : currentResolution,
        "available-resolutions": available
    };
};

gpii.xrandr.setScreenResolution = function (that, size) {
    var current = that.getScreenResolution();
    if (fluid.model.diff(size, current)) {
        return true;
    } else {
        return nodeXrandr.setScreenResolution(size.width, size.height);
    }
};

gpii.xrandr.allSettings = {
    "screen-resolution": {
        get: "gpii.xrandr.getScreenResolution",
        set: "gpii.xrandr.setScreenResolution"
    }
};

gpii.xrandr.getImpl = function (settingsRequest) {
    settingsRequest = settingsRequest || gpii.xrandr.allSettings;
    var settings = fluid.transform(settingsRequest, function (value, key) {
        var funcEntry = gpii.xrandr.allSettings[key];
        if (funcEntry) {
            return fluid.invokeGlobalFunction(funcEntry.get);
        } else {
            fluid.fail("Invalid key to Xrandr settings handler - " +
                key + " - valid choices are " + JSON.stringify(fluid.keys(gpii.xrandr.allSettings)));
        }
    });
    return settings;
};

gpii.xrandr.get = function (that, settingsarray) {
    var app = fluid.copy(settingsarray);
    for (var appId in app) {
        for (var j = 0; j < app[appId].length; j++) {
            var settings = that.getImpl(app[appId][j].settings);
            var noOptions = { settings: settings };
            app[appId][j] = noOptions;
        }
    }
    return app;
};

gpii.xrandr.set = function (that, settingsarray) {
    var app = fluid.copy(settingsarray);
    for (var appId in app) {
        for (var j = 0; j < app[appId].length; j++) {
            var settings = app[appId][j].settings;

            for (var settingKey in settings) {
                var value = settings[settingKey];

                var oldValue;
                if (settingKey === "screen-resolution") {
                    oldValue = that.getScreenResolution();
                    that.setScreenResolution(value);
                } else {
                    var err = "Invalid key: " + settingKey;
                    fluid.fail(err);
                    fluid.log(err);
                }

                settings[settingKey] = {
                    "oldValue": oldValue,
                    "newValue": value
                };
            }
            var noOptions = { settings: settings};
            app[appId][j] = noOptions;
        }
    }
    return app;
};
