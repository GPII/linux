/*!
XML Settings Handler Tests

Copyright 2012 Raising the Floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/*global console*/

(function () {
    // This loads universal.
    var fluid = require("universal"),
        gpii = fluid.registerNamespace("gpii"),
        jqUnit = fluid.require("jqUnit"),
        child_process = require("child_process");

    fluid.require("gsettingsBridge", require);

    var gsettingsHandlerTests = gpii.tests.testEnvironment();

    var put1 = {
        request: {
            "putreq": [
                {
                    settings: {
                        "double-setting": 3.1,
                        "boolean-setting": true,
                        "string-setting": "here i am"
                    },
                    options: {
                        schema: "net.gpii.testing.gsettings.multi-set1"      
                    }
                }
            ]
        },
        expected:  {
            "putreq": [
                {
                    settings: {
                        "double-setting": { "oldValue":  5.0, "newValue": 3.1 },
                        "boolean-setting": { "oldValue":  false, "newValue": true },
                        "string-setting": { "oldValue":  "abcdefg", "newValue": "here i am" }
                    },
                    options: {
                        schema: "net.gpii.testing.gsettings.multi-set1"      
                    }
                }            
            ]
        }
    };

    var put2 = {
        request: {
            "putreq": [
                {
                    settings: {
                        "double-setting": 3.2,
                        "boolean-setting": true,
                        "string-setting": "here i amma"
                    },
                    options: {
                        schema: "net.gpii.testing.gsettings.multi-set2"      
                    }
                }, {
                    settings: {
                        "other-double-setting": 123.0,
                        "other-string-setting": "congratulations"
                    },
                    options: {
                        schema: "net.gpii.testing.gsettings.multi-set3"
                    }
                }
            ]
        },
        expected: {
            "putreq": [
                {
                    settings: {
                        "double-setting": { "oldValue": 5, "newValue": 3.2},
                        "boolean-setting": { "oldValue": false, "newValue": true },
                        "string-setting": { "oldValue": "abcdefg", "newValue": "here i amma" }
                    },
                    options: {
                        schema: "net.gpii.testing.gsettings.multi-set2"      
                    }
                }, {
                    settings: {
                        "other-double-setting": { "oldValue": 987.61, "newValue": 123.0 },
                        "other-string-setting": { "oldValue": "hello world", "newValue": "congratulations" }
                    },
                    options: {
                        schema: "net.gpii.testing.gsettings.multi-set3"
                    }
                }
            ]
        }
    };

    var get1 = {
        request: {
            "putreq": [
                {
                    settings: {
                        "double-setting": null,
                        "boolean-setting": null,
                        "string-setting": null
                    },
                    options: {
                        schema: "net.gpii.testing.gsettings.multi-get1"      
                    }
                }, {
                    settings: {
                        "other-string-setting": null
                    },
                    options: {
                        schema: "net.gpii.testing.gsettings.multi-get2"
                    }
                }
            ]
        },
        expected: {
            "putreq": [
                {
                    settings: {
                        "double-setting": 5.0,
                        "boolean-setting": false,
                        "string-setting": "abcdefg"
                    },
                    options: {
                        schema: "net.gpii.testing.gsettings.multi-get1"      
                    }
                }, {
                    settings: {
                        "other-string-setting": "hello world"
                    },
                    options: {
                        schema: "net.gpii.testing.gsettings.multi-get2"
                    }
                }
            ] 
        }
    };
   
    jqUnit.module("Gsettings Handler Tests"); 

    gsettingsHandlerTests.test("Getting single keys via gsettings handler", function() {
        //First check reading single keys ... the default values:
         jqUnit.assertEquals("Checking 'double' key", 5.0, 
            gpii.gsettings.getSingleKey("net.gpii.testing.gsettings.single-get", "double-setting"));
         jqUnit.assertEquals("Checking 'boolean' key", false, 
            gpii.gsettings.getSingleKey("net.gpii.testing.gsettings.single-get", "boolean-setting"));
         jqUnit.assertEquals("Checking 'string' key", "abcdefg", 
            gpii.gsettings.getSingleKey("net.gpii.testing.gsettings.single-get", "string-setting"));
    });


    gsettingsHandlerTests.test("Setting single keys via gsettings handler", function() {
        //set and check double value
        gpii.gsettings.setSingleKey("net.gpii.testing.gsettings.single-set", "double-setting", 6.789);
        jqUnit.assertEquals("Checking 'double' key", 6.789, 
            gpii.gsettings.getSingleKey("net.gpii.testing.gsettings.single-set", "double-setting"));
        //set and check boolean value
        gpii.gsettings.setSingleKey("net.gpii.testing.gsettings.single-set", "boolean-setting", true);
        jqUnit.assertEquals("Checking 'boolean' key", true, 
            gpii.gsettings.getSingleKey("net.gpii.testing.gsettings.single-set", "boolean-setting"));
        //set and check string value
        gpii.gsettings.setSingleKey("net.gpii.testing.gsettings.single-set", "string-setting", "Absolutely awesome");
        jqUnit.assertEquals("Checking 'string' key", "Absolutely awesome", 
            gpii.gsettings.getSingleKey("net.gpii.testing.gsettings.single-set", "string-setting"));
    });

    gsettingsHandlerTests.test("Setting multiple keys", function () {
        var response = gpii.gsettings.set(put1.request);
        console.log(JSON.stringify(response));
        jqUnit.assertDeepEq("The values should be set and expected payload returned: ", put1.expected, response);
        //reset the schema
        gpii.gsettings.set(put1.reset);
    });

    gsettingsHandlerTests.test("Setting multiple keys in mutltiple schemas", function () {
        var response = gpii.gsettings.set(put2.request);
        jqUnit.assertDeepEq("The values should be set and expected payload returned: ", put2.expected, response);
        //reset the schema
        gpii.gsettings.set(put2.reset);
    });

    gsettingsHandlerTests.test("Getting multiple keys in mutltiple schemas", function () {
        var response = gpii.gsettings.get(get1.request);
        console.log(JSON.stringify(response));
        console.log("EXPECTED: "+JSON.stringify(get1.expected));
        jqUnit.assertDeepEq("The values should be set and expected payload returned: ", get1.expected, response);
    });
}());