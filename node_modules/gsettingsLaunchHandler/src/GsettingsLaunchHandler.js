/*!
GPII gsettings Launch Handler

Copyright 2012 Raising the Floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/*global require */

(function () {
    "use strict";

    var fluid = require("universal");
    var gpii = fluid.registerNamespace("gpii");

    fluid.registerNamespace("gpii.linux.launchHandlers.gsettingsLaunchHandler");

    // Check payload for errors. 
    // If no errors is found, false is returned
    // Else the statusCode of the first error found, along with the full payload is returned:
    // { statusCode: XXX, data: payload }
    gpii.linux.launchHandlers.gsettingsLaunchHandler.payloadHasErrors = function(payload) {
        var errors = {};
        //returns true if errors found, else false
        var foundErrors = fluid.find(payload, function (schemas) {
            return fluid.find(schemas, function (schema, schemaid) {
                return fluid.find(schema.settings, function (value, key) {
                    //if a setting has returned a statusCode, it has failed
                    if (value.statusCode) {
                        errors.statusCode = value.statusCode;
                        errors.data = payload;
                        return true;
                    }
                });
            });
        });
        return foundErrors ? errors : false;
    };

    // Main launch handler function
    // Will return an object with statusCode (200 if success) and data if errors are found
    gpii.linux.launchHandlers.gsettingsLaunchHandler.run = function (data) {
        var gsettingsReturn = fluid.invokeGlobalFunction("gpii.gsettings.set", [data]);
        //check for errors in the return payload
        var errors = payloadHasErrors(gsettingsReturn);

        if (errors) {
            //TODO consider reverting the successful settings (reset to state from before call)
            fluid.log("Error message received in gsettingsLaunchHandler - statusCode: "+errors.statusCode);
            return errors;
        } else {
            return { statusCode: 200 };
        }
    };
}());
