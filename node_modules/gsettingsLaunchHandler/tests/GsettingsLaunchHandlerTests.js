/*!
Launch Handler Testing

Copyright 2012 Raising the Floor - International

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

(function () {
    var fluid = require("universal");
    var jqUnit = fluid.require("jqUnit");
    var child_process = require("child_process");
    
    gpii = fluid.registerNamespace("gpii");

    var magnifierPayload = {
        "start": [
            {
                "org.gnome.desktop.a11y.applications": {
                    "settings": {
                        "screen-magnifier-enabled": true
                    },
                    "options": {}
                }
            }
        ],
        "stop": [
            {
                "org.gnome.desktop.a11y.applications": {
                    "settings": {
                        "screen-magnifier-enabled": false
                    },
                    "options": {}
                }
            }
        ]
    };

    var noErrorPayload = [{
        "org.gnome.desktop.a11y.magnifier": {
            "settings": {
                "cross-hairs-clip": { "oldValue":  false, "newValue": true },
                "cross-hairs-color": { "oldValue":  "green", "newValue": "red" },
                "cross-hairs-length": { "oldValue":  20, "newValue": 4096 },
            },
            "options": {}
        }
    }];

    var errorPayload = [{
        "org.gnome.desktop.a11y.magnifier": {
            "settings": {
                "cross-hairs-clip": { "oldValue":  false, "newValue": true },
                "cross-hairs-color": { "oldValue":  "red", "newValue": "red", statusCode: 500, statusMessage: "Internal Error"},
                "cross-hairs-length": { "oldValue":  20, "newValue": 4096, statusCode: 400 }
            },
            "options": {}
        }
    }];

    jqUnit.test("gpii.linux.launchHandlers.gsettingsLaunchHandler.payloadHasErrors() function", function () {
        jqUnit.expect(2);
        //test set:
        var retVal = fluid.invokeGlobalFunction("gpii.linux.launchHandlers.gsettingsLaunchHandler.payloadHasErrors", [errorPayload]);
        jqUnit.assertDeepEq(retVal, { statusCode: 500, data: errorPayload}, "Testing payload with error");

        retVal = gpii.linux.launchHandlers.gsettingsLaunchHandler.payloadHasErrors(noErrorPayload);
        jqUnit.assertDeepEq(retVal, false, "Testing payload without error");
    });

    jqUnit.asyncTest("gpii.linux.launchHandlers.gsettingsLaunchHandler.run() function", function () {
        jqUnit.expect(4);
        var retVal = gpii.linux.launchHandlers.gsettingsLaunchHandler.run(magnifierPayload.start);
        jqUnit.assertEquals(retVal, { statusCode: 200 }, "Launching with valid payload should give success statusCode");
        //check that gsetting is set
        child_process.spawn("gsettings get org.gnome.desktop.a11y.applications screen-magnifier-enabled", function(error, stdout, stderr) {
            console.log("stdout: "+stdout);
            jqUnit.assertEquals(stdout, true, "Expect the magnifier to be set");
        });

        retVal = gpii.linux.launchHandlers.gsettingsLaunchHandler.run(magnifierPayload.stop);
        jqUnit.assertEquals(retVal, { statusCode: 200 }, "Launching with valid payload should give success statusCode");
        //check that gsetting is set
        child_process.spawn("gsettings get org.gnome.desktop.a11y.applications screen-magnifier-enabled", function(error, stdout, stderr) {
            console.log("stdout: "+stdout);
            assertEquals(stdout, false, "Expect the magnifier to be unset");
        });
    });
}());