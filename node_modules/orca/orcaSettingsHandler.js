/*!
 * GPII Orca Settings Handler
 *
 * Copyright 2013 Emergya
 * Author Javier Hern√°ndez <jhernandez@emergya.com>
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/gpii/universal/LICENSE.txt
 * */

(function () {
    "use strict";

    var fluid = require("universal");
    var gpii = fluid.registerNamespace("gpii");
    var fs = require("fs");
    var spawn = require("child_process").spawn;
    var path = require("path");

    // TODO: When FLUID-4852 is fixed, remove these definitions
    var getParser = {
        parser: {
            parse: fluid.pathUtil.parseEL,
            compose: fluid.pathUtil.composePath
        },
        strategies: [fluid.model.defaultFetchStrategy]
    };

    var setParser = {
        parser: {
            parse: fluid.pathUtil.parseEL,
            compose: fluid.pathUtil.composePath
        },
        strategies: [fluid.model.defaultFetchStrategy, fluid.model.defaultCreatorStrategy]
    };

    var ORCA_ARGS = ["--disable", "speech",
                     "--disable", "braille",
                     "--disable", "braille-monitor",
                     "--disable", "main-window",
                     "--disable", "splash-window"];

    var HOME = process.env.HOME;
    var XDG_DATA_HOME = process.env.XDG_DATA_HOME || path.resolve(HOME, ".local/share");
    var orcaSettingsFile = path.resolve(XDG_DATA_HOME, "orca/user-settings.conf");

    fluid.registerNamespace("gpii.launch");

    gpii.orca = gpii.orca || {};

    function wait(millis) {
        var date = new Date();
        var curDate = null;
      
        do { curDate = new Date(); }
        while(curDate-date < millis);
    }

    function getJSONFromFile(file) {
        return JSON.parse(fs.readFileSync(file, "utf8"));
    }

    gpii.orca.set = function(settingsarray) {
        var app = fluid.copy(settingsarray);

        var settings = app["org.gnome.orca"][0].settings;
        var options = app["org.gnome.orca"][0].options;
        var user = options.user;
        var newSettingsResponse = {};

        if (!fs.existsSync(orcaSettingsFile)) {
            var orcaSpawn = spawn("orca", ORCA_ARGS);

            while(!fs.existsSync(orcaSettingsFile)) {
                wait(500);
            };

            orcaSpawn.kill("SIGKILL");
        };

        var userSettings = getJSONFromFile(orcaSettingsFile);
        var defaultProfiles = fluid.copy(userSettings.profiles);
        var defaultStartingProfile = fluid.copy(userSettings.general.startingProfile);
        var customizedProfile = fluid.copy(userSettings.general);

        if ("profiles" in settings) {
            // Then, we're running restoreSettings
            //
            userSettings.profiles = settings["profiles"];
            userSettings.general.startingProfile = settings["general.startingProfile"];
        } else {
            // We're running setSettings
            //
            fluid.log("orcaSettingsHandler: User ", user, 
                      " has requested these following settings: ", settings);

            // Apply settings
            //
            for (var k in settings) {
              fluid.set(customizedProfile, k, settings[k], setParser);
            }
 
            // Set profile id
            //
            customizedProfile.profile = customizedProfile.activeProfile =
                                        customizedProfile.startingProfile =
                                        [user, user];
 
            userSettings.profiles[user] = customizedProfile;
            userSettings.general.startingProfile = [user, user];
        };

        // Write config file
        //
        fs.writeFileSync(orcaSettingsFile,
                         JSON.stringify(userSettings, null, 4));

        newSettingsResponse = {
            "profiles": {
                "oldValue": defaultProfiles,
                "newValue": userSettings.profiles
            },
            "general.startingProfile": {
                "oldValue": defaultStartingProfile,
                "newValue": [user, user]
            }
        };

        return { 'org.gnome.orca' : [{"options": options,
                                      "settings": newSettingsResponse}]
        };
    }

})();
