/*
GPII Node.js GSettings Bridge

Copyright 2012 Steven Githens

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/
#define I_KNOW_THE_PACKAGEKIT_GLIB2_API_IS_SUBJECT_TO_CHANGE 1

#include <node.h>
#include <v8.h>
#include <packagekit-glib2/packagekit.h>
//#include <packagekit-glib2/packagekit-private.h>
#include <gio/gio.h>

using namespace v8;

static void
pk_print_package (PkPackage *package, gpointer data) {
  gchar *printable = NULL;
  gchar *printable_pad = NULL;
  gchar *package_id = NULL;
  gchar *summary = NULL;
  gchar *info_pad = NULL;
  gchar **split = NULL;
  PkInfoEnum info;

  /* get data */
  g_object_get (package,
                "info", &info,
                "package-id", &package_id,
                "summary", &summary,
                NULL);

  /* ignore finished */
  // if (info == PK_INFO_ENUM_FINISHED)
  //   goto out;

  /* split */
  // split = pk_package_id_split (package_id);
  // if (split == NULL)
  //   goto out;

  /* make these all the same length */
  //  info_pad = pk_strpad (pk_info_enum_to_localised_past (info), 12);

  /* create printable */
  printable = pk_package_id_to_printable (package_id);
  g_print("%s\n", printable);
  /* don't pretty print */
  // if (!is_console) {
  //   g_print ("%s %s\n", info_pad, printable);
  //   goto out;
  // }

  /* pad the name-version */
 //  printable_pad = pk_strpad (printable, 40);
 //  g_print ("%s\t%s\t%s\n", info_pad, printable_pad, summary);
 // out:
 //  /* free all the data */
 //  g_free (printable);
 //  g_free (printable_pad);
 //  g_free (info_pad);
 //  g_strfreev (split);
}

Handle<Value> packagekit_hello(const Arguments& args) {
  HandleScope scope;
  PkClient *client;
  PkResults *results;
  GPtrArray *array;
  PkPackageSack *sack;
  char *names[] = {"gnome"};
  GPtrArray *message_array;
  client = pk_client_new();
  results = pk_client_search_names(client,PK_FILTER_ENUM_FREE,names,NULL,NULL,NULL,NULL);
  message_array = pk_results_get_message_array(results);
  sack = pk_results_get_package_sack(results);
  pk_package_sack_sort(sack, PK_PACKAGE_SACK_SORT_TYPE_NAME);
  array = pk_package_sack_get_array(sack);
  g_ptr_array_foreach(array,(GFunc) pk_print_package, NULL);
  return scope.Close(String::New("Hello World Package Kit w/ PkClient"));
}

void init(Handle<Object> target) {
  g_type_init(); // Initialize gobject system
  target->Set(String::NewSymbol("packagekit_hello"),
              FunctionTemplate::New(packagekit_hello)->GetFunction());
}
NODE_MODULE(nodepackagekit, init)

