/*!
GPII Node.js PackageKit Bridge

Copyright 2012 Steven Githens
Copyright 2013, 2014 Inclusive Design Research Centre, OCAD University
Copyright 2013, 2014 Emergya

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/*global require, console*/
/*jshint globalstrict: true */

"use strict";

var fluid = require ("universal"),
    jqUnit = fluid.require ("jqUnit"),
    packagekit = require("./build/Release/nodepackagekit.node");

jqUnit.module ("PackageKit Bridge node add-on module");

jqUnit.test ("Testing PackageKit Bridge", function() {

    function isInstalled (pkg) {
        return (!!pkg && (pkg.data.indexOf ("installed") !== -1));
    }

    function findGlib2 (aPkg) {
        return aPkg.name === "glib2";
    }

    function findNamedPackage (name, pkgArray) {
        var thePkg = null;
        pkgArray.some (function (aPkg) {
            if (aPkg.name === name) {
                thePkg = aPkg;
                return true;
            }
            else {
                return false;
            }
        });
        return thePkg;
    }

    // *** searchPackage() tests implicit and explicit 'none' filter ***

    // Test whether glib2 is installed OR available, using implicit and
    // explicit 'none' filter.  Packagekit-glib -- the code this add-on
    // invokes -- itself depends on glib2.  It must be installed, if this is
    // running.
    console.log ("Testing searchPackage() of 'glib2' with implicit 'none' " +
                 "filter, meaning installed or available.");
    var pkgs = packagekit.searchPackage ("glib2");
    jqUnit.assertNotEquals ("No package for glib2 was found during search",
                            0, pkgs.length);
    var found = pkgs.some (findGlib2);
    jqUnit.assertTrue ("No package 'glib2' found", found);

    console.log ("Testing searchPackage() of 'glib2', explicit 'none' filter.");
    pkgs = packagekit.searchPackage ("glib2", "none");
    jqUnit.assertNotEquals ("No package for glib2 was found during search",
                            0, pkgs.length);
    found = pkgs.some (findGlib2);
    jqUnit.assertTrue ("No package 'glib2' found", found);

    // *** searchFiles() test ***

    // The searchFiles() function expects the full path name where the package
    // would be installed, even it if is not installed.  Check using the common
    // utility 'ls'.
    console.log ("Testing searchFiles() for '/usr/bin/ls'.");
    pkgs = packagekit.searchFiles ("/usr/bin/ls");
    jqUnit.assertNotEquals ("No package for 'ls' was found during search",
                            0, pkgs.length);

    // *** searchPackage() tests with "installed" and "~installed" filters ***

    // Test the "installed" vs. "~installed" filters with regards to 'tuxguitar',
    // and the array of packages returned by searchPackage() using the filters.
    console.log ("Testing searchPackage() with 'tuxguitar' comparing " +
                 "installed vs. available filters.");

    // Get the tuxguitar package, whether installed or not.
    pkgs = packagekit.searchPackage ("tuxguitar");
    var tuxguitarPkg = findNamedPackage ("tuxguitar", pkgs);

    var installedPkgs = packagekit.searchPackage ("tuxguitar", "installed");
    var installed = (findNamedPackage ("tuxguitar", installedPkgs) !== null);

    var availablePkgs = packagekit.searchPackage ("tuxguitar", "~installed");
    var available = (findNamedPackage ("tuxguitar", availablePkgs) !== null);

    // Depending on whether tuxguitar is installed on not, check that it appears
    // correctly in the installed or available lists.
    if (isInstalled (tuxguitarPkg)) {
        jqUnit.assertTrue ("Did not find tuxguitar in installed packages",
                            installed);
        jqUnit.assertFalse ("Found tuxguitar in available packages",
                            available);
    }
    else {
        jqUnit.assertFalse ("Found tuxguitar in installed packages",
                             installed);
        jqUnit.assertTrue ("Did not find tuxguitar in available packages",
                           available);
    }

    // *** getPackages() tests ***
    console.log ("Testing getPackages() with tuxguitar comparing " +
                 "installed vs. available filters.");
    console.log ("  Note:  this will take some time.");

    installedPkgs = packagekit.getPackages ("installed");
    installed = (findNamedPackage ("tuxguitar", installedPkgs) !== null);

    availablePkgs = packagekit.getPackages ("~installed");
    available = (findNamedPackage ("tuxguitar", availablePkgs) !== null);

    // Depending on whether tuxguitar is installed on not, check that it appears
    // correctly in the installed or available lists.
    if (isInstalled (tuxguitarPkg)) {
        jqUnit.assertTrue ("Did not find tuxguitar in installed packages",
                            installed);
        jqUnit.assertFalse ("Found tuxguitar in available packages",
                            available);
    }
    else {
        jqUnit.assertFalse ("Found tuxguitar in installed packages",
                             installed);
        jqUnit.assertTrue ("Did not find tuxguitar in available packages",
                           available);
    }

    // *** performAction() tests ***

    // Assumption:  tuxguitar is not installed.
    // If it is installed, don't run the test (it will fail), but say so on the
    // console, and recommend that it be removed manually before running tests.
    if (isInstalled (tuxguitarPkg)) {
      console.log ("Package 'tuxguitar' is installed; will not run test for " +
                   "installing it --");
      console.log ("Please manually remove tuxguitar to run this test.");
    }
    else {
      console.log ("Testing performAction ('install') -- install tuxguitar");
      packagekit.performAction("install", tuxguitarPkg.id);
      pkgs = packagekit.searchPackage ("tuxguitar", "installed");
      jqUnit.assertEquals ("Failure installing package tuxguitar, ",
                           1, pkgs.length);
    }

    // Assumption:  tuxguitar is installed.
    // If it is not installed, don't run the 'remove' test (it will fail), but
    // say so on the console.
    pkgs = packagekit.searchPackage ("tuxguitar");
    tuxguitarPkg = pkgs[0];
    if (!isInstalled (tuxguitarPkg)) {
      console.log ("Package 'tuxguitar' is not installed; will not run test " +
                   "for removing it -- ");
      console.log ("The 'install' test must have failed");
    }
    else {
      console.log ("Testing performAction ('remove') -- removing tuxguitar");
      pkgs = packagekit.searchPackage ("tuxguitar", "installed");
      jqUnit.assertEquals ("No package tuxguitar installed; cannot remove",
                           1, pkgs.length);

      packagekit.performAction("remove", tuxguitarPkg.id);
      pkgs = packagekit.searchPackage ("tuxguitar", "~installed");
      jqUnit.assertNotEquals ("Failed to remove tuxguitar package",
                              0, pkgs.length);
    }

    // *** updatePackage() tests ***

    console.log ("Testing updatePackage() with 'emacspeak'");

    // The package ids of an old and newer version of 'emacspeak'.
    // TODO:  JS:  While the following check against two version of
    // 'emacspeak' works on Fedora-20, it may not work on all distros; hence,
    // the check that searchPackage() finds the two versions. If so, the test is
    // run; otherwise no test is run.  Need to find a better way to find
    // multiple versions of a package to test against.
    var oldEmacspeak = "38.0-5.fc20";
    var newEmacspeak = "39.0-1.fc20";
    pkgs = packagekit.searchPackage ("emacspseak");
    if (pkgs.length === 2 &&
        (pkgs[0].version === oldEmacspeak && pkgs[1].version === newEmacspeak &&
        pkgs[1].data.indexOf("updates") !== -1)) {

        packagekit.updatePackage (pkgs[1].id);
        var currentPkgs = packagekit.searchPackage ("emacspseak", "installed");
        jqUnit.assertEquals ("Failed to update to " + newEmacspeak,
                             currentPkgs[0].version, newEmacspeak);

        // Restore to previous.
        packagekit.removePackage (currentPkgs[0].id);
    }
    else {
      console.log ("Cannot test update of emacspeak as there are no updates");
    }
});
