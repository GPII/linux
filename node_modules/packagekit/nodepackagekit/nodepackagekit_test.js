/*!
GPII Node.js PackageKit Bridge

Copyright 2012 Steven Githens
Copyright 2013, 2014 Inclusive Design Research Centre, OCAD University
Copyright 2013, 2014 Emergya

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/*global require, console*/
/*jshint globalstrict: true */

"use strict";

var fluid = require ("universal"),
    jqUnit = fluid.require ("jqUnit"),
    packagekit = require("./build/Release/nodepackagekit.node");

jqUnit.module ("PackageKit Bridge node add-on module");

jqUnit.test ("Testing PackageKit Bridge", function() {

    function isInstalled (pkg) {
        return (!!pkg && (pkg.data.indexOf ("installed") !== -1));
    }

    function findGlib2 (aPkg) {
        return aPkg.name === "glib2";
    }

    function findPackageByName (name, pkgArray) {
        var thePkg = null;
        pkgArray.some (function (aPkg) {
            if (aPkg.name === name) {
                thePkg = aPkg;
                return true;
            }
            else {
                return false;
            }
        });
        return thePkg;
    }

    // Return the package that matches name, version, and architecture.
    function matchPackage (pkg, pkgList) {
        var thePkg = null;
        pkgList.some (function (aPkg) {
            if (aPkg.name === pkg.name &&
                aPkg.version === pkg.version &&
                aPkg.arch === pkg.arch) {
                thePkg = aPkg;
                return true;
            }
            else {
                return false;
            }
        });
        return thePkg;
    }

    // *** searchPackage() tests implicit and explicit 'none' filter ***

    // Test whether glib2 is installed OR available, using implicit and
    // explicit 'none' filter.  Packagekit-glib -- the code this add-on
    // invokes -- itself depends on glib2.  It must be installed, if this is
    // running.
    console.log ("Testing searchPackage() of 'glib2' with implicit 'none' " +
                 "filter, meaning installed or available.");
    var pkgs = packagekit.searchPackage ("glib2");
    var found = pkgs.some (findGlib2);
    jqUnit.assertTrue ("Search 'glib2', implicit 'none' filter", found);

    console.log ("Testing searchPackage() of 'glib2', explicit 'none' filter.");
    pkgs = packagekit.searchPackage ("glib2", "none");
    jqUnit.assertTrue ("Search 'glib2', explicit 'none' filter", found);

    // *** searchFiles() test ***

    // The searchFiles() function expects the full path name where the package
    // would be installed, even it if is not installed.  Check using the common
    // utility 'ls'.
    console.log ("Testing searchFiles() for '/usr/bin/ls'.");
    pkgs = packagekit.searchFiles ("/usr/bin/ls");
    jqUnit.assertNotEquals ("Search file '/usr/bin/ls', implicit 'none' filter",
                            0, pkgs.length);

    // *** searchPackage() tests with "installed" and "~installed" filters ***

    // Test the "installed" vs. "~installed" filters with regards to 'tuxguitar',
    // and the array of packages returned by searchPackage() using the filters.
    console.log ("Testing searchPackage() with 'tuxguitar' comparing " +
                 "installed vs. available filters.");

    // Get the tuxguitar package, whether installed or not.
    pkgs = packagekit.searchPackage ("tuxguitar");
    var tuxguitarPkg = findPackageByName ("tuxguitar", pkgs);

    var installedPkgs = packagekit.searchPackage ("tuxguitar", "installed");
    var installed = (findPackageByName ("tuxguitar", installedPkgs) !== null);

    var availablePkgs = packagekit.searchPackage ("tuxguitar", "~installed");
    var available = (findPackageByName ("tuxguitar", availablePkgs) !== null);

    // Depending on whether tuxguitar is installed on not, check that it appears
    // correctly in the installed or available lists.
    if (isInstalled (tuxguitarPkg)) {
        jqUnit.assertTrue ("Search 'tuxguitar' in installed packages list",
                            installed);
        jqUnit.assertFalse ("Search 'tuxguitar' not in available packages list",
                            available);
    }
    else {
        jqUnit.assertFalse ("Search 'tuxguitar' not in installed packages list",
                             installed);
        jqUnit.assertTrue ("Search 'tuxguitar' is in available packages list",
                           available);
    }

    // *** getPackages() tests ***
    console.log ("Testing getPackages() with tuxguitar comparing " +
                 "installed vs. available filters.");
    console.log ("  Note:  this will take some time.");

    installedPkgs = packagekit.getPackages ("installed");
    installed = (findPackageByName ("tuxguitar", installedPkgs) !== null);

    availablePkgs = packagekit.getPackages ("~installed");
    available = (findPackageByName ("tuxguitar", availablePkgs) !== null);

    // Depending on whether tuxguitar is installed on not, check that it appears
    // correctly in the installed or available lists.
    if (isInstalled (tuxguitarPkg)) {
        jqUnit.assertTrue ("Get 'tuxguitar' is in installed packages list",
                            installed);
        jqUnit.assertFalse ("Get 'tuxguitar' is not in available packages list",
                            available);
    }
    else {
        jqUnit.assertFalse ("Get 'tuxguitar' is not in installed packages list",
                             installed);
        jqUnit.assertTrue ("Get 'tuxguitar' is in available packages list",
                           available);
    }

    // *** performAction() tests ***

    // Using the tuxguitar package:  If it's installed, test removing it and
    // then (re)install it ...
    var aPkg = null;
    if (isInstalled (tuxguitarPkg)) {
        console.log ("Testing performAction ('remove') -- removing tuxguitar");
        packagekit.performAction ("remove", tuxguitarPkg.id);
        pkgs = packagekit.searchPackage ("tuxguitar", "~installed");
        aPkg = matchPackage (tuxguitarPkg, pkgs);
        jqUnit.assertNotNull ("Temove tuxguitar package", aPkg);

        console.log ("Testing performAction ('install') -- install tuxguitar");
        packagekit.performAction ("install", aPkg.id);
        pkgs = packagekit.searchPackage ("tuxguitar", "installed");
        aPkg = matchPackage (tuxguitarPkg, pkgs);
        jqUnit.assertNotNull ("Install tuxguitar package", aPkg);
    }
    // ...if it isn't installed, test installing it and then removing it.
    else {
        console.log ("Testing performAction ('install') -- install tuxguitar");
        packagekit.performAction ("install", tuxguitarPkg.id);
        pkgs = packagekit.searchPackage ("tuxguitar", "installed");
        aPkg = matchPackage (tuxguitarPkg, pkgs);
        jqUnit.assertNotNull ("Install package tuxguitar, ", aPkg);

        console.log ("Testing performAction ('remove') -- removing tuxguitar");
        packagekit.performAction ("remove", aPkg.id);
        pkgs = packagekit.searchPackage ("tuxguitar", "~installed");
        aPkg = matchPackage (tuxguitarPkg, pkgs);
        jqUnit.assertNotNull ("Remove tuxguitar package", aPkg);
    }

    // *** updatePackage() tests ***

    console.log ("Testing updatePackage() with 'emacspeak'");

    // The package ids of an old and newer version of 'emacspeak'.
    // TODO:  JS:  While the following check against two version of
    // 'emacspeak' works on Fedora-20, it may not work on all distros; hence,
    // the check that searchPackage() finds the two versions. If so, the test is
    // run; otherwise no test is run.  Need to find a better way to find
    // multiple versions of a package to test against.
    var oldEmacspeak = "38.0-5.fc20";
    var newEmacspeak = "39.0-1.fc20";
    pkgs = packagekit.searchPackage ("emacspseak");
    if (pkgs.length === 2 &&
        (pkgs[0].version === oldEmacspeak && pkgs[1].version === newEmacspeak &&
        pkgs[1].data.indexOf("updates") !== -1)) {

        packagekit.updatePackage (pkgs[1].id);
        var currentPkgs = packagekit.searchPackage ("emacspseak", "installed");
        jqUnit.assertEquals ("Updating to " + newEmacspeak,
                             currentPkgs[0].version, newEmacspeak);

        // Restore to previous.
        packagekit.removePackage (currentPkgs[0].id);
    }
    else {
      console.log ("Cannot test update of emacspeak as there are no updates");
    }
});
