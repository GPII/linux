/*!
GPII Node.js PackageKit Bridge

Copyright 2012 Steven Githens
Copyright 2013 Inclusive Design Research Centre, OCAD University

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

var fluid = require ('universal'),
    jqUnit = fluid.require ('jqUnit'),
    packagekit = require('./build/Release/nodepackagekit.node');

jqUnit.module ('PackageKit Bridge node add-on module');

jqUnit.test ("Testing PackageKit Bridge", function() {

    // *** searchPackage() tests ***

    console.log ("Testing searchPackage() for 'tuxguitar' with implicit 'none' " +
                 "filter, meaning installed or available");
    var pkg = packagekit.searchPackage ('tuxguitar');
    jqUnit.assertNotEquals ("No package for tuxguitar was found during search",
                            0, pkg.length);
    var name = pkg[0].id.indexOf ('tuxguitar');
    jqUnit.assertNotEquals ("No tuxguitar package found, found " +
                            pkg[0].id + " instead",
                            -1, name);

    console.log ("Testing searchPackage() for 'tuxguitar' with explicit 'none' filter");
    var pkg = packagekit.searchPackage ('tuxguitar', 'none');
    jqUnit.assertNotEquals ("No package for tuxguitar was found during search",
                            0, pkg.length);
    var name = pkg[0].id.indexOf ("tuxguitar");
    jqUnit.assertNotEquals ("No tuxguitar package found, found " +
                            pkg[0].id + " instead",
                            -1, name);

    console.log ("Checking that tuxguitar package is not installed");
    pkg = packagekit.searchPackage ('tuxguitar');
    jqUnit.assertNotEquals ("No package for tuxguitar found", 0, pkg.length);

    // TODO:  This tests that tuxguitar is not installed, but it's not really
    // an error if it's there.  For now, manually remove tuxguitar
    // before running tests.
    var notInstalled = pkg[0].data.indexOf ('installed');
    jqUnit.assertEquals ("Package tuxguitar is installed, data property is: '" +
                         pkg[0].data + "'",
                         -1, notInstalled);
    
    // Use "~installed" filter to check that tuxguitar is not installed.  Then
    // use the "installed" filter.  In the former case, the size of the 
    // returned array of package ids should be one, and, in the latter, should
    // be zero.
    pkg = packagekit.searchPackage ('tuxguitar', '~installed');
    jqUnit.assertEquals ("Package tuxguitar is installed, " +
                         "size of package id list is not one: '" +
                         pkg.length,
                         1, pkg.length);
    
    pkg = packagekit.searchPackage ('tuxguitar', 'installed');
    jqUnit.assertEquals ("Package tuxguitar is not installed, " +
                         "size of package id list is not zero: '" +
                         pkg.length,
                         0, pkg.length);

    // *** searchFiles() test ***

    console.log ("Testing searchFiles() for '/usr/bin/tuxguitar'");

    // The searchFiles() function expects the full path name where the package
    // would be installed, even it if is not installed.  The presumed use of
    // searchFiles() is after a prior "find" shell command that has found the
    // file on the system and returns the path where it was found.  Even so,
    // "find" does not return the version number.  Pass the path to
    // searchFiles() in order to get the full package information, including the
    // version number.  If "find" did *not* return anything (an empty path),
    // then use the searchPackage() function instead.
    var pkg = packagekit.searchFiles ('/usr/bin/tuxguitar');
    jqUnit.assertNotEquals ("No package for tuxguitar was found during search",
                            0, pkg.length);
    var name = pkg[0].id.indexOf ('tuxguitar');
    jqUnit.assertNotEquals ("No tuxguitar package found, found " +
                            pkg[0].id + " instead",
                            -1, name);

    // *** installPackage() tests ***

    console.log ("Testing installPackage()");
    pkg = packagekit.searchPackage ('tuxguitar', '~installed');
    jqUnit.assertEquals ("No package tuxguitar available; cannot install",
                         1, pkg.length);

    packagekit.installPackage (pkg[0].id);
    pkg = packagekit.searchPackage ('tuxguitar', 'installed');
    jqUnit.assertEquals ("Failure installing package tuxguitar, ",
                         1, pkg.length);

    // *** removePackage() tests ***

    console.log ("Testing removePackage()");
    pkg = packagekit.searchPackage ('tuxguitar', 'installed');
    jqUnit.assertEquals ("No package tuxguitar installed; cannot remove",
                         1, pkg.length);

    packagekit.removePackage (pkg[0].id);
    pkg = packagekit.searchPackage ('tuxguitar', '~installed');
    jqUnit.assertEquals ("Failed to remove tuxguitar package", 1, pkg.length);

    // *** updatePackage() tests ***

    console.log ("Testing updatePackage()");

    // The package ids of an old and newer version of 'vorbis-tools'.
    // TODO:  JS:  While the following check against two version of
    // 'vorbis-tools' works on Fedora-19, it may not work on all distros; hence,
    // the check that searchPackage() finds the two verions. If so, the test is
    // run; otherwise no test is run.  Need to find a better package with
    // multiple versions that can be used for the test.
    var oldVorbis = '1:1.4.0-8.fc19';
    var newVorbis = '1:1.4.0-10.fc19';
    pkg = packagekit.searchPackage ('vorbis-tools');
    if (pkg.length == 2) {
      if (pkg[0].version == oldVorbis && pkg[1].version == newVorbis &&
          pkg[1].data.indexOf('updates') != -1) {

        packagekit.updatePackage (pkg[1].id);
        var currentPkgs = packagekit.searchPackage ('vorbis-tools', 'installed');
        jqUnit.assertEquals ("Failed to update to " + newVorbis,
                             currentPkgs[0].version, newVorbis);

        // Restore to previous.
        packagekit.removePackage(currentPkgs[0].id);
      }
    }
});
