/*!
GPII Node.js PackageKit Bridge

Copyright 2012 Steven Githens
Copyright 2013, 2014 Inclusive Design Research Centre, OCAD University
Copyright 2013, 2014 Emergya

Licensed under the New BSD license. You may not use this file except in
compliance with this License.

You may obtain a copy of the License at
https://github.com/gpii/universal/LICENSE.txt
*/

/*global require, console*/
/*jshint globalstrict: true */

"use strict";

var fluid = require ("universal"),
    jqUnit = fluid.require ("jqUnit"),
    packagekit = require("./build/Release/nodepackagekit.node");

jqUnit.module ("PackageKit Bridge node add-on module");

jqUnit.test ("Testing PackageKit Bridge", function() {

    function isInstalled(pkg) {
      return pkg.data.indexOf ("installed") !== -1;
    }

    // *** searchPackage() tests ***

    // Test whether tuxguitar is installed OR available, using implicit and
    // explicit 'none' filter.
    console.log ("Testing searchPackage() for 'tuxguitar' with implicit 'none' " +
                 "filter, meaning installed or available");
    var pkgs = packagekit.searchPackage ("tuxguitar");
    jqUnit.assertNotEquals ("No package for tuxguitar was found during search",
                            0, pkgs.length);
    var name = pkgs[0].id.indexOf ("tuxguitar");
    jqUnit.assertNotEquals ("No tuxguitar package found, found " +
                            pkgs[0].id + " instead",
                            -1, name);

    console.log ("Testing searchPackage() for 'tuxguitar' with explicit 'none' filter");
    pkgs = packagekit.searchPackage ("tuxguitar", "none");
    jqUnit.assertNotEquals ("No package for tuxguitar was found during search",
                            0, pkgs.length);
    name = pkgs[0].id.indexOf ("tuxguitar");
    jqUnit.assertNotEquals ("No tuxguitar package found, found " +
                            pkgs[0].id + " instead",
                            -1, name);

    // Assumption:  tuxguitar is not installed.
    // If it is installed, don't run the test (it will fail), but say so on the
    // console, and recommend that it be removed manually before running tests.
    if (isInstalled (pkgs[0])) {
      console.log ("Package 'tuxguitar' is installed; will not run test that it is not installed --");
      console.log ("Please manually remove tuxguitar to run this test.");
    }
    else {
      console.log ("Testing that tuxguitar package is not installed");
      pkgs = packagekit.searchPackage ("tuxguitar");
      jqUnit.assertNotEquals ("No package for tuxguitar found", 0, pkgs.length);

      var notInstalled = pkgs[0].data.indexOf ("installed");
      jqUnit.assertEquals ("Package tuxguitar is installed, data property is: '" +
                           pkgs[0].data + "'",
                           -1, notInstalled);
 
      // Use "~installed" filter to check that tuxguitar is not installed.  Then
      // use the "installed" filter.  In the former case, the size of the
      // returned array of package ids should be one, and, in the latter, should
      // be zero.
      pkgs = packagekit.searchPackage ("tuxguitar", "~installed");
      jqUnit.assertNotEquals ("Package tuxguitar is installed, " +
                              "size of package id list is not one: '" +
                              pkgs.length,
                              0, pkgs.length);
 
      pkgs = packagekit.searchPackage ("tuxguitar", "installed");
      jqUnit.assertEquals ("Package tuxguitar is not installed, " +
                           "size of package id list is not zero: " +
                           pkgs.length,
                           0, pkgs.length);
    }

    // *** searchFiles() test ***

    // The searchFiles() function expects the full path name where the package
    // would be installed, even it if is not installed.  The presumed use of
    // searchFiles() is after a prior "find" shell command that has found the
    // file on the system and returns the path where it was found.  Even so,
    // "find" does not return the version number.  Pass the path to
    // searchFiles() in order to get the full package information, including the
    // version number.  If "find" did *not* return anything (an empty path),
    // then use the searchPackage() function instead.
    console.log ("Testing searchFiles() for '/usr/bin/tuxguitar'");
    pkgs = packagekit.searchFiles ("/usr/bin/tuxguitar");
    jqUnit.assertNotEquals ("No package for tuxguitar was found during search",
                            0, pkgs.length);
    name = pkgs[0].id.indexOf ("tuxguitar");
    jqUnit.assertNotEquals ("No tuxguitar package found, found " +
                            pkgs[0].id + " instead",
                            -1, name);

    // *** performAction() tests ***

    // Assumption:  tuxguitar is not installed.
    // If it is installed, don't run the test (it will fail), but say so on the
    // console, and recommend that it be removed manually before running tests.
    if (isInstalled (pkgs[0])) {
      console.log ("Package 'tuxguitar' is installed; will not run test for installing it --");
      console.log ("Please manually remove tuxguitar to run this test.");
    }
    else {
      console.log ("Testing performAction ('install') -- install tuxguitar");
      packagekit.performAction("install", pkgs[0].id);
      pkgs = packagekit.searchPackage ("tuxguitar", "installed");
      jqUnit.assertEquals ("Failure installing package tuxguitar, ",
                           1, pkgs.length);
    }

    // Assumption:  tuxguitar is installed.
    // If it is not installed, don't run the 'remove' test (it will fail), but
    // say so on the console.

    if (!isInstalled (pkgs[0])) {
      console.log ("Package 'tuxguitar' is not installed; will not run test for removing it -- ");
      console.log ("The 'install' test must have failed");
    }
    else {
      console.log ("Testing performAction('remove') -- removing tuxguitar");
      pkgs = packagekit.searchPackage ("tuxguitar", "installed");
      jqUnit.assertEquals ("No package tuxguitar installed; cannot remove",
                           1, pkgs.length);

      packagekit.performAction("remove", pkgs[0].id);
      pkgs = packagekit.searchPackage ("tuxguitar", "~installed");
      jqUnit.assertNotEquals ("Failed to remove tuxguitar package", 0, pkgs.length);
    }

    // *** getPackages() tests ***

    console.log ("Testing getPackages() comparing tuxguitar against installed and available packages");
    pkgs = packagekit.searchPackage ("tuxguitar");
    var tuxguitarPkg = pkgs[0];

    var installedPkgs = packagekit.getPackages ("installed");
    var installedIndex = -1;
    for (var i = 0; i < installedPkgs.length; i++) {
      if (installedPkgs[i].name === tuxguitarPkg.name) {
        installedIndex = i;
        break;
      }
    }
    var availablePkgs = packagekit.getPackages ("~installed");
    var availableIndex = -1;
    for (i = 0; i < availablePkgs.length; i++) {
      if (availablePkgs[i].name === tuxguitarPkg.name) {
        availableIndex = i;
        break;
      }
    }

    // Depending on whether tuxguitar is installed on not, check that it appears
    // correctly in the installed or available lists.
    if (isInstalled (tuxguitarPkg)) {
      jqUnit.assertNotEquals ("Did not find tuxguitar in installed packages", -1, installedIndex);
      jqUnit.assertEquals ("Found tuxguitar in the available packages", -1, availableIndex);
    }
    else {
      jqUnit.assertEquals ("Found tuxguitar in installed packages", -1, installedIndex);
      jqUnit.assertNotEquals ("Did not find tuxguitar in the available packages", -1, availableIndex);
    }

    // *** updatePackage() tests ***

    console.log ("Testing updatePackage() with 'emacspeak'");

    // The package ids of an old and newer version of 'emacspeak'.
    // TODO:  JS:  While the following check against two version of
    // 'emacspeak' works on Fedora-20, it may not work on all distros; hence,
    // the check that searchPackage() finds the two versions. If so, the test is
    // run; otherwise no test is run.  Need to find a better way to find
    // multiple versions of a package to test against.
    var oldEmacspeak = "38.0-5.fc20";
    var newEmacspeak = "39.0-1.fc20";
    pkgs = packagekit.searchPackage ("emacspseak");
    if (pkgs.length === 2 &&
        (pkgs[0].version === oldEmacspeak && pkgs[1].version === newEmacspeak &&
        pkgs[1].data.indexOf("updates") !== -1)) {

        packagekit.updatePackage (pkgs[1].id);
        var currentPkgs = packagekit.searchPackage ("emacspseak", "installed");
        jqUnit.assertEquals ("Failed to update to " + newEmacspeak,
                             currentPkgs[0].version, newEmacspeak);

        // Restore to previous.
        packagekit.removePackage (currentPkgs[0].id);
    }
    else {
      console.log ("Cannot test update of emacspeak since there are no updates");
    }

});
